/**************************************************************************** 
 * Job:             EGRCS8000_ATUALIZA_SASFULL            A5J3RISO.AA00003M * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: au-fx-ap-001                                            * 
 * Port:            8562                                                    * 
 * Location:        /Risco                                                  * 
 *                   Operacional/EGRC/Produtivo/02_Repositorio/03_Jobs      * 
 *                                                                          * 
 * Server:          SASApp                                A5OWOFMB.AR000002 * 
 *                                                                          * 
 * Source Table:    TCTR_ATUALIZA_REP -                   A5J3RISO.AQ00009J * 
 *                   RO_PARAM.TCTR_ATUALIZA_REP                             * 
 * Target Table:    TCTR_ATUALIZA_REP -                   A5J3RISO.AQ00009J * 
 *                   RO_PARAM.TCTR_ATUALIZA_REP                             * 
 *                                                                          * 
 * Generated on:    Terça-feira, 3 de Novembro de 2015 11h13min06s BRST     * 
 * Generated by:    l970882                                                 * 
 * Version:         SAS Data Integration Studio 4.6                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5J3RISO.AA00003M);
%let etls_jobName = %nrquote(EGRCS8000_ATUALIZA_SASFULL);
%let etls_userID = %nrquote(l970882);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc ;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8562);
%let metaServer     = %nrquote(au-fx-ap-001);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

/*Include das libnames*/
%include "/RODATAPRD/ROPRODUTIVO/EGRC_RO/PROGRAMAS/GERAL/DeclaracaoLibnames.sas";
 
/*Inclui código com funções genéricas*/
%include "/RODATAPRD/ROPRODUTIVO/EGRC_RO/PROGRAMAS/GERAL/DeclaracaoMacrosGerais.sas";
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Extract                               A5J3RISO.AC000188 * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    TCTR_ATUALIZA_REP -                   A5J3RISO.AQ00009J * 
 *                   RO_PARAM.TCTR_ATUALIZA_REP                             * 
 * Target Table:    Extract - work.W2DH5PGL               A5J3RISO.AI0001DH * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000188);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for EGRC_RO_PARAMETROS  */ 
LIBNAME RO_PARAM BASE "/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/PARAMETROS/TABELA" filelockwait = 600 ;
%rcSet(&syslibrc); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_PARAM.TCTR_ATUALIZA_REP, DATA)) or 
         %sysfunc(exist(RO_PARAM.TCTR_ATUALIZA_REP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_PARAM.TCTR_ATUALIZA_REP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(RO_PARAM.TCTR_ATUALIZA_REP); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2DH5PGL;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.W2DH5PGL as
      select
         CUSUARIO_SOLIC,
         CCAMPO_ATUALIZAR,
         DTH_INCLUSAO,
         DTH_EXECUCAO,
         ICLAUSULA_ATUALIZA,
         CPROCESSADO
   from &SYSLAST
      where CPROCESSADO = 'N'
   order by
      CPROCESSADO,
      DTH_INCLUSAO desc
   ;
quit;

%let SYSLAST = work.W2DH5PGL;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Execute                               A5J3RISO.AC000189 * 
 * Transform:       Execute                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.W2DH5PGL               A5J3RISO.AI0001DH * 
 * Target Table:    Execute - work.DV_INTER_UPD           A5J3RISO.AI0001DI * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000189);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W2DH5PGL, DATA)) or 
         %sysfunc(exist(work.W2DH5PGL, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W2DH5PGL out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W2DH5PGL); 

%let _INPUT_count = 1;
%let _INPUT = work.W2DH5PGL;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5J3RISO.AI0001DH%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT1 = work.W2DH5PGL;
%let _INPUT1_connect = ;
%let _INPUT1_engine = ;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/Extract_A5J3RISO.AI0001DH%(WorkTable%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();

%let _OUTPUT_count = 1;
%let _OUTPUT = work.DV_INTER_UPD;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Execute_A5J3RISO.AI0001DI%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = CUSUARIO_SOLIC CCAMPO_ATUALIZAR DTH_INCLUSAO DTH_EXECUCAO 
        ICLAUSULA_ATUALIZA CPROCESSADO;
%let _OUTPUT_col_count = 6;
%let _OUTPUT_col0_name = CUSUARIO_SOLIC;
%let _OUTPUT_col0_table = work.DV_INTER_UPD;
%let _OUTPUT_col0_length = 20;
%let _OUTPUT_col0_type = $;
%let _OUTPUT_col0_format = ;
%let _OUTPUT_col0_informat = ;
%let _OUTPUT_col0_label = %nrquote(Codigo do usuario que solicitou o reprocessamento);
%let _OUTPUT_col0_input0 = CUSUARIO_SOLIC;
%let _OUTPUT_col0_exp = ;
%let _OUTPUT_col0_input = CUSUARIO_SOLIC;
%let _OUTPUT_col0_input_count = 1;
%let _OUTPUT_col1_name = CCAMPO_ATUALIZAR;
%let _OUTPUT_col1_table = work.DV_INTER_UPD;
%let _OUTPUT_col1_length = 50;
%let _OUTPUT_col1_type = $;
%let _OUTPUT_col1_format = ;
%let _OUTPUT_col1_informat = ;
%let _OUTPUT_col1_label = %nrquote(Codigo do campo a ser atualizado);
%let _OUTPUT_col1_input0 = CCAMPO_ATUALIZAR;
%let _OUTPUT_col1_exp = ;
%let _OUTPUT_col1_input = CCAMPO_ATUALIZAR;
%let _OUTPUT_col1_input_count = 1;
%let _OUTPUT_col2_name = DTH_INCLUSAO;
%let _OUTPUT_col2_table = work.DV_INTER_UPD;
%let _OUTPUT_col2_length = 8;
%let _OUTPUT_col2_type = ;
%let _OUTPUT_col2_format = Datetime20.;
%let _OUTPUT_col2_informat = ;
%let _OUTPUT_col2_label = %nrquote(Data de inclusao do reprocessamento);
%let _OUTPUT_col2_input0 = DTH_INCLUSAO;
%let _OUTPUT_col2_exp = ;
%let _OUTPUT_col2_input = DTH_INCLUSAO;
%let _OUTPUT_col2_input_count = 1;
%let _OUTPUT_col3_name = DTH_EXECUCAO;
%let _OUTPUT_col3_table = work.DV_INTER_UPD;
%let _OUTPUT_col3_length = 8;
%let _OUTPUT_col3_type = ;
%let _OUTPUT_col3_format = Datetime20.;
%let _OUTPUT_col3_informat = ;
%let _OUTPUT_col3_label = %nrquote(Data de execucao do reprocessamento);
%let _OUTPUT_col3_exp = today();
%let _OUTPUT_col3_input_count = 0;
%let _OUTPUT_col4_name = ICLAUSULA_ATUALIZA;
%let _OUTPUT_col4_table = work.DV_INTER_UPD;
%let _OUTPUT_col4_length = 500;
%let _OUTPUT_col4_type = $;
%let _OUTPUT_col4_format = ;
%let _OUTPUT_col4_informat = ;
%let _OUTPUT_col4_label = %nrquote(Clausula de atualizacao do repositorio);
%let _OUTPUT_col4_input0 = ICLAUSULA_ATUALIZA;
%let _OUTPUT_col4_exp = ;
%let _OUTPUT_col4_input = ICLAUSULA_ATUALIZA;
%let _OUTPUT_col4_input_count = 1;
%let _OUTPUT_col5_name = CPROCESSADO;
%let _OUTPUT_col5_table = work.DV_INTER_UPD;
%let _OUTPUT_col5_length = 1;
%let _OUTPUT_col5_type = $;
%let _OUTPUT_col5_format = $1.;
%let _OUTPUT_col5_informat = ;
%let _OUTPUT_col5_label = %nrquote(Codigo de processado);
%let _OUTPUT_col5_exp = 'S';
%let _OUTPUT_col5_input_count = 0;

%let _OUTPUT1 = work.DV_INTER_UPD;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/Execute_A5J3RISO.AI0001DI%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT1_keep = CUSUARIO_SOLIC CCAMPO_ATUALIZAR DTH_INCLUSAO DTH_EXECUCAO 
        ICLAUSULA_ATUALIZA CPROCESSADO;
%let _OUTPUT1_col_count = 6;
%let _OUTPUT1_col0_name = CUSUARIO_SOLIC;
%let _OUTPUT1_col0_table = work.DV_INTER_UPD;
%let _OUTPUT1_col0_length = 20;
%let _OUTPUT1_col0_type = $;
%let _OUTPUT1_col0_format = ;
%let _OUTPUT1_col0_informat = ;
%let _OUTPUT1_col0_label = %nrquote(Codigo do usuario que solicitou o reprocessamento);
%let _OUTPUT1_col0_input0 = CUSUARIO_SOLIC;
%let _OUTPUT1_col0_exp = ;
%let _OUTPUT1_col0_input = CUSUARIO_SOLIC;
%let _OUTPUT1_col0_input_count = 1;
%let _OUTPUT1_col1_name = CCAMPO_ATUALIZAR;
%let _OUTPUT1_col1_table = work.DV_INTER_UPD;
%let _OUTPUT1_col1_length = 50;
%let _OUTPUT1_col1_type = $;
%let _OUTPUT1_col1_format = ;
%let _OUTPUT1_col1_informat = ;
%let _OUTPUT1_col1_label = %nrquote(Codigo do campo a ser atualizado);
%let _OUTPUT1_col1_input0 = CCAMPO_ATUALIZAR;
%let _OUTPUT1_col1_exp = ;
%let _OUTPUT1_col1_input = CCAMPO_ATUALIZAR;
%let _OUTPUT1_col1_input_count = 1;
%let _OUTPUT1_col2_name = DTH_INCLUSAO;
%let _OUTPUT1_col2_table = work.DV_INTER_UPD;
%let _OUTPUT1_col2_length = 8;
%let _OUTPUT1_col2_type = ;
%let _OUTPUT1_col2_format = Datetime20.;
%let _OUTPUT1_col2_informat = ;
%let _OUTPUT1_col2_label = %nrquote(Data de inclusao do reprocessamento);
%let _OUTPUT1_col2_input0 = DTH_INCLUSAO;
%let _OUTPUT1_col2_exp = ;
%let _OUTPUT1_col2_input = DTH_INCLUSAO;
%let _OUTPUT1_col2_input_count = 1;
%let _OUTPUT1_col3_name = DTH_EXECUCAO;
%let _OUTPUT1_col3_table = work.DV_INTER_UPD;
%let _OUTPUT1_col3_length = 8;
%let _OUTPUT1_col3_type = ;
%let _OUTPUT1_col3_format = Datetime20.;
%let _OUTPUT1_col3_informat = ;
%let _OUTPUT1_col3_label = %nrquote(Data de execucao do reprocessamento);
%let _OUTPUT1_col3_exp = today();
%let _OUTPUT1_col3_input_count = 0;
%let _OUTPUT1_col4_name = ICLAUSULA_ATUALIZA;
%let _OUTPUT1_col4_table = work.DV_INTER_UPD;
%let _OUTPUT1_col4_length = 500;
%let _OUTPUT1_col4_type = $;
%let _OUTPUT1_col4_format = ;
%let _OUTPUT1_col4_informat = ;
%let _OUTPUT1_col4_label = %nrquote(Clausula de atualizacao do repositorio);
%let _OUTPUT1_col4_input0 = ICLAUSULA_ATUALIZA;
%let _OUTPUT1_col4_exp = ;
%let _OUTPUT1_col4_input = ICLAUSULA_ATUALIZA;
%let _OUTPUT1_col4_input_count = 1;
%let _OUTPUT1_col5_name = CPROCESSADO;
%let _OUTPUT1_col5_table = work.DV_INTER_UPD;
%let _OUTPUT1_col5_length = 1;
%let _OUTPUT1_col5_type = $;
%let _OUTPUT1_col5_format = $1.;
%let _OUTPUT1_col5_informat = ;
%let _OUTPUT1_col5_label = %nrquote(Codigo de processado);
%let _OUTPUT1_col5_exp = 'S';
%let _OUTPUT1_col5_input_count = 0;

/*---- Start of User Written Code  ----*/ 

%let clausula = ;

proc sql noprint;
	select ICLAUSULA_ATUALIZA 
	into: clausula
		from &SYSLAST.
	where CPROCESSADO = 'N';
quit;

proc sql noprint;
	&clausula.;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table &_OUTPUT. as
      select
         CUSUARIO_SOLIC,
			CCAMPO_ATUALIZAR,
         DTH_INCLUSAO,
         (today()) as DTH_EXECUCAO length = 8
            format = Datetime20.
            label = 'Data de execucao do reprocessamento',
         ICLAUSULA_ATUALIZA,
         ('S') as CPROCESSADO length = 1
            format = $1.
            label = 'Codigo de processado'
   	from &SYSLAST
   ;
quit;
/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/**  Step end Execute **/

/*==========================================================================* 
 * Step:            Table Loader                          A5J3RISO.AC00018A * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Execute - work.DV_INTER_UPD           A5J3RISO.AI0001DI * 
 * Target Table:    TCTR_ATUALIZA_REP -                   A5J3RISO.AQ00009J * 
 *                   RO_PARAM.TCTR_ATUALIZA_REP                             * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00018A);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.DV_INTER_UPD); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Update - Matching=SQLSet, New=AppendProc
   Blanks may replace non-blanks: true
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(RO_PARAM.TCTR_ATUALIZA_REP, DATA)) or 
         %sysfunc(exist(RO_PARAM.TCTR_ATUALIZA_REP, VIEW))); 
   
   %let etls_hasUpdateIndex=0; 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data RO_PARAM.TCTR_ATUALIZA_REP;
         attrib CUSUARIO_SOLIC length = $20
            label = 'Codigo do usuario que solicitou o reprocessamento'; 
         attrib CCAMPO_ATUALIZAR length = $50
            label = 'Codigo do campo a ser atualizado'; 
         attrib DTH_INCLUSAO length = 8
            format = DATETIME20.
            label = 'Data de inclusao do reprocessamento'; 
         attrib DTH_EXECUCAO length = 8
            format = DATETIME20.
            label = 'Data de execucao do reprocessamento'; 
         attrib ICLAUSULA_ATUALIZA length = $500
            label = 'Clausula de atualizacao do repositorio'; 
         attrib CPROCESSADO length = $1
            format = $1.
            label = 'Codigo de processado'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   %let etls_recCheckExist = 0; 
   %let etls_targetHasRows = 0; 
   %macro etls_recordCheck; 
      %let etls_recCheckExist = %eval(%sysfunc(exist(RO_PARAM.TCTR_ATUALIZA_REP, DATA)) or 
            %sysfunc(exist(RO_PARAM.TCTR_ATUALIZA_REP, VIEW))); 
      
      %if (&etls_recCheckExist) %then
      %do;
         %local etls_syntaxcheck; 
         %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
         /* Turn off syntaxcheck option to perform following steps  */ 
         options nosyntaxcheck;
         
         data _null_; 
            set RO_PARAM.TCTR_ATUALIZA_REP( obs=1 ); 
            call symput("etls_targetHasRows",'1'); 
         run; 
         /* Reset syntaxcheck option to previous setting  */ 
         options &etls_syntaxcheck; 
      %end;
   %mend etls_recordCheck;
   %etls_recordCheck;
   
   
   %if (&etls_targetHasRows) %then 
   %do;  /* if has rows */ 
      proc sql ; 
         /* update existing records in the master table  */ 
         update RO_PARAM.TCTR_ATUALIZA_REP as m
            set CCAMPO_ATUALIZAR = (select CCAMPO_ATUALIZAR from &etls_lastTable as t 
                                where m.CUSUARIO_SOLIC = t.CUSUARIO_SOLIC and 
                                      m.DTH_INCLUSAO = t.DTH_INCLUSAO),
                   DTH_EXECUCAO = (select DTH_EXECUCAO from &etls_lastTable as t 
                                where m.CUSUARIO_SOLIC = t.CUSUARIO_SOLIC and 
                                      m.DTH_INCLUSAO = t.DTH_INCLUSAO),
                   ICLAUSULA_ATUALIZA = (select ICLAUSULA_ATUALIZA from &etls_lastTable as t 
                                where m.CUSUARIO_SOLIC = t.CUSUARIO_SOLIC and 
                                      m.DTH_INCLUSAO = t.DTH_INCLUSAO),
                   CPROCESSADO = (select CPROCESSADO from &etls_lastTable as t 
                                where m.CUSUARIO_SOLIC = t.CUSUARIO_SOLIC and 
                                      m.DTH_INCLUSAO = t.DTH_INCLUSAO)
               where exists (select * from &etls_lastTable as t
                                   where m.CUSUARIO_SOLIC = t.CUSUARIO_SOLIC and 
                                         m.DTH_INCLUSAO = t.DTH_INCLUSAO);
         
         /* create a temporary table of new records from the transaction table  */ 
         create table etls_newrecords as 
            select * 
               from &etls_lastTable as t 
                  where not exists 
                     (select * from RO_PARAM.TCTR_ATUALIZA_REP
                   as m 
                                      where m.CUSUARIO_SOLIC = t.CUSUARIO_SOLIC and 
                                            m.DTH_INCLUSAO = t.DTH_INCLUSAO)
         ; 
         
      quit;
      
      %let etls_lastTable = &SYSLAST;
      
      %let etls_tableOptions = ; 
      
      %global etls_sql_pushDown;
      %let etls_sql_pushDown = &sys_sql_ip_all;
      
      %rcSet(&sqlrc); 
      
   %end; /* if has rows */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = RO_PARAM.TCTR_ATUALIZA_REP 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_newrecords;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_PARAM.TCTR_ATUALIZA_REP, DATA)) or 
         %sysfunc(exist(RO_PARAM.TCTR_ATUALIZA_REP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_PARAM.TCTR_ATUALIZA_REP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

