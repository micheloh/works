/**************************************************************************** 
 * Job:             EGRCS8000_SGRE_040                    A5J3RISO.AA00003F * 
 * Description:     Pré carga mensal dos dados do SGRE                      * 
 *                                                                          * 
 * Metadata Server: au-fx-ap-001                                            * 
 * Port:            8562                                                    * 
 * Location:        /Risco Operacional/EGRC/Produtivo/01_Pre_carga/03_Jobs  * 
 *                                                                          * 
 * Server:          SASApp                                A5OWOFMB.AR000002 * 
 *                                                                          * 
 * Source Tables:   TSGRE_PERDA_RECUP -                   A5J3RISO.AQ00007T * 
 *                   RO_PRE.TSGRE_PERDA_RECUP                               * 
 *                  TSGRE_PERDA_ORIG -                    A5J3RISO.AQ00007S * 
 *                   RO_PRE.TSGRE_PERDA_ORIG                                * 
 *                  REGRA_SGRE - RO_PARAM.REGRA_SGRE      A5J3RISO.AQ00009G * 
 *                  TEVNTO_PERDA_CTA -                    A5J3RISO.AQ00009L * 
 *                   RO_PARAM.TEVNTO_PERDA_CTA                              * 
 *                  TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 *                  TSGRE - RO_PRE.TSGRE                  A5J3RISO.AQ00007R * 
 *                  REGRA_SGRE - RO_PARAM.REGRA_SGRE      A5J3RISO.AQ00009G * 
 *                  TEVNTO_PERDA_CTA -                    A5J3RISO.AQ00009L * 
 *                   RO_PARAM.TEVNTO_PERDA_CTA                              * 
 *                  TSGRE - RO_PRE.TSGRE                  A5J3RISO.AQ00007R * 
 *                  TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 * Target Tables:   TSGRE - RO_PRE.TSGRE                  A5J3RISO.AQ00007R * 
 *                  TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 *                  TCTR_CARGA - RO_CTR_C.TCTR_CARGA      A5J3RISO.AQ00007Y * 
 *                                                                          * 
 * Generated on:    Terça-feira, 3 de Novembro de 2015 11h21min43s BRST     * 
 * Generated by:    l970882                                                 * 
 * Version:         SAS Data Integration Studio 4.6                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5J3RISO.AA00003F);
%let etls_jobName = %nrquote(EGRCS8000_SGRE_040);
%let etls_userID = %nrquote(l970882);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc ;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8562);
%let metaServer     = %nrquote(au-fx-ap-001);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

/*Declara libnames*/
%include "/RODATAPRD/ROPRODUTIVO/EGRC_RO/PROGRAMAS/GERAL/DeclaracaoLibnames.sas";
/*Inclui código com funções genéricas*/
%include "/RODATAPRD/ROPRODUTIVO/EGRC_RO/PROGRAMAS/GERAL/DeclaracaoMacrosGerais.sas";
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            Extract                               A5J3RISO.AC00015X * 
 * Transform:       Extract                                                 * 
 * Description:     Retira linhas em branco                                 * 
 *                                                                          * 
 * Source Table:    TSGRE_PERDA_ORIG -                    A5J3RISO.AQ00007S * 
 *                   RO_PRE.TSGRE_PERDA_ORIG                                * 
 * Target Table:    Extract - work.TWSGREPERDA_2          A5J3RISO.AI0001B3 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00015X);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for EGRC_RO_PRE_CARGA  */ 
LIBNAME RO_PRE BASE "/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/CARGA/TABELA/PRE_CARGA";
%rcSet(&syslibrc); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_PRE.TSGRE_PERDA_ORIG, DATA)) or 
         %sysfunc(exist(RO_PRE.TSGRE_PERDA_ORIG, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_PRE.TSGRE_PERDA_ORIG out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(RO_PRE.TSGRE_PERDA_ORIG); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete TWSGREPERDA_2;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.TWSGREPERDA_2 as
      select
         DOCORR   
            informat = DDMMYY8.,
         RHIST,
         DDESCB   
            informat = DDMMYY8.,
         CCTA_CLIE,
         CCORRL,
         CRZ_CTBIL,
         CCTA_CTBIL,
         (compress(CTIPO_PERDA)) as CTIPO_PERDA length = 2,
         CJUNC_DSTNO,
         CDEPDC,
         VPERDA   
            informat = 13.2,
         VREEMB_BDN   
            informat = 13.2,
         VREEMB   
            informat = 13.2,
         VCPMF_TRANS   
            informat = 13.2,
         CPEDIDO,
         CTP_CTA_BDN,
         CTP_OCORR_BDN,
         CAG_CLIE,
         CMAQUINA,
         CLOC_EQUIP,
         CCPMF_BDN,
         DCTBIL   
            informat = DDMMYY8.,
         (input(put(year(DCTBIL),4.)||compress(put(month(DCTBIL),z2.))||"01",8.)) as DREFERENCIA_LEGADO length = 8
            format = 8.
            informat = 8.
            label = 'dtReferenciaLegado',
         ("SGREROCI") as IARQUIVO_LEGADO length = 255
            format = $255.
            informat = $255.
            label = 'nmArquivoLegado',
         (CPEDIDO||put('4312',$4.)||put('SGRE',$4.)) as CIDTFD_CNTRL length = 50
            format = $50.
            informat = $50.
            label = 'cdIdentificadorCentral',
         (237) as CEMPR_RAZAO length = 8
            format = 8.
            informat = 8.
            label = 'cdEmpresaRazao'
   from &SYSLAST
      where DOCORR ^= .
   ;
quit;

%let SYSLAST = work.TWSGREPERDA_2;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            CTR_INICIO                            A5J3RISO.AC00015Y * 
 * Transform:       CTR_INICIO                                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.TWSGREPERDA_2          A5J3RISO.AI0001B3 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00015Y);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.TWSGREPERDA_2, DATA)) or 
         %sysfunc(exist(work.TWSGREPERDA_2, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.TWSGREPERDA_2 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.TWSGREPERDA_2); 

%let _INPUT_count = 1; 
%let _INPUT = work.TWSGREPERDA_2;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Extract_A5J3RISO.AI0001B3%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT0 = work.TWSGREPERDA_2;
%let _INPUT0_connect = ;
%let _INPUT0_engine = ;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/Extract_A5J3RISO.AI0001B3%(WorkTable%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote();

%let _OUTPUT_count = 0; 

%let Tabela = %nrquote(SGREROCI);
%let Job = %nrquote(EGRCS8000_SGRE_040);
%let Libname = %nrquote(RO_PRE);

%macro ctr_inicio;
	/*
	Armazena na variavel dat_referencia a data contabil a ser processada
	*/	
	%let _dat_referencia=;
	%let arquivo=;

	%let _DAT_REFERENCIA = 0;

		proc sql noprint;
		
				select  DREFERENCIA_LEGADO
				into :_DAT_REFERENCIA
				from &SYSLAST;
		
		quit;

	%let _DAT_REFERENCIA = &_DAT_REFERENCIA.;
	
		data TCTR_CARGA;
			   attrib NOM_TABELA length = $255
	            label = 'Nome da tabela'; 
	         attrib NOM_JOB length = $120
	            label = 'Nome do Job Processado'; 
	         attrib NOM_LIBNAME length = $8
	            label = 'nome da libname Utilizada'; 
	         attrib DTH_INI length = 8
	            format = Datetime20.
	            label = 'Data de ínicio do Processo'; 
	         attrib DTH_FIM length = 8
	            format = Datetime20.
	            label = 'Data de Fim do Processo'; 
	         attrib DAT_CARGA length = 8
	            format = ddmmyy10.
	            label = 'Data de Carga'; 
	         attrib REFERENCIA length = 8
	            format = 8.
	            label = 'Referencia'; 
	         attrib COD_RETURN_CODE length = 8
	            label = 'Código de Retorno do Processo'; 

			NOM_TABELA 	 	  = "&tabela.";
			NOM_JOB 		     = "&job.";
			NOM_LIBNAME 	  = "&Libname.";
			DTH_INI 		     = datetime();
			DTH_FIM 		     = .;
			DAT_CARGA 		  = today();
			REFERENCIA		   = &_DAT_REFERENCIA.;
			COD_RETURN_CODE  = .;
		run;

	%let arquivo = &tabela.;

	%put dat_ref  = &dat_referencia.;
	%put ult_dat  = &ult_dat.;

%mend;

/*
Macro Variáveis
*/

%global 	dat_referencia
			_dat_referencia
			dat_carga
			ult_dat
			dat_ref
			arquivo;

/*
Rotinas
*/

%ctr_inicio;
%put dat_ref_out: &_dat_referencia.;
%put arquivo: &tabela.;



%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end CTR_INICIO **/

/*==========================================================================* 
 * Step:            Data Validation                       A5J3RISO.AC00015Z * 
 * Transform:       Data Validation                                         * 
 * Description:     Registra na tabela de erros do arquivo do SGRE e envia  * 
 *                   por email                                              * 
 *                                                                          * 
 * Source Table:    Extract - work.TWSGREPERDA_2          A5J3RISO.AI0001B3 * 
 * Target Tables:   Valid records table - work.DV_SGRE    A5J3RISO.AI0001B4 * 
 *                  Error records table -                 A5J3RISO.AI0001B5 * 
 *                   work.DV_SGRE_ERROR                                     * 
 *                  Exception records table -             A5J3RISO.AI0001B6 * 
 *                   work.DV_SGRE_EXCEC                                     * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00015Z);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.TWSGREPERDA_2, DATA)) or 
         %sysfunc(exist(work.TWSGREPERDA_2, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.TWSGREPERDA_2 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.TWSGREPERDA_2); 

proc datasets library=work nolist nowarn memtype=(data view);
 delete etls_Errors etls_Exceptions etls_target;
quit;

%macro etls_Validate; 

   /* Create SAS work table from source table  */ 
   proc sql;
   create table etls_Source as
    select *
    from work.TWSGREPERDA_2
   ;
   quit;
   
   %let runTime = %sysfunc(datetime()); 
   
   /* Create the Exception Report  */ 
   %macro makeReport; 
   
      %if (&m_excp eq 1) %then 
      %do; 
         options nodate; 
         
         proc sort data = etls_Exceptions; 
            by x_row; 
         run; 
         
         proc print data = etls_Exceptions noobs label; 
            title1 "Exceptions Found in Table: work.TWSGREPERDA_2"; 
            title2 "%sysfunc(datetime(),nldatmap.)"; 
         run; 
         
         options date; 
         
      %end; 
      
   %mend makeReport; 
   
   /* Delete error tables prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE_ERROR;
   quit;
   
   /* Delete exception table prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE_EXCEC;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE;
   quit;
   
   %let m_excp = 0;
   %let cust_exp=0; 
   
   /*---- Begin checks for Custom, Missing Values, and Invalid Values  ----*/ 
   
   data etls_target
      (keep = DOCORR RHIST DDESCB CCTA_CLIE CCORRL CRZ_CTBIL CCTA_CTBIL CTIPO_PERDA 
      CJUNC_DSTNO CDEPDC VPERDA VREEMB_BDN VREEMB VCPMF_TRANS CPEDIDO CTP_CTA_BDN 
      CTP_OCORR_BDN CAG_CLIE CMAQUINA CLOC_EQUIP CCPMF_BDN DCTBIL DREFERENCIA_LEGADO 
      IARQUIVO_LEGADO CIDTFD_CNTRL CEMPR_RAZAO)
     etls_Errors
      (keep = DOCORR RHIST DDESCB CCTA_CLIE CRZ_CTBIL CCTA_CTBIL CTIPO_PERDA CDEPDC VPERDA 
      VREEMB_BDN VREEMB VCPMF_TRANS CPEDIDO CTP_CTA_BDN CTP_OCORR_BDN CAG_CLIE 
      CMAQUINA CLOC_EQUIP CCPMF_BDN DCTBIL CCORRL CJUNC_DSTNO DREFERENCIA_LEGADO 
      CIDTFD_CNTRL CEMPR_RAZAO)
     etls_Exceptions
      (keep = x_row x_type x_column x_note x_custom_name x_datetime DOCORR RHIST DDESCB 
      CCTA_CLIE CRZ_CTBIL CCTA_CTBIL CTIPO_PERDA CDEPDC VPERDA VREEMB_BDN VREEMB 
      VCPMF_TRANS CPEDIDO CTP_CTA_BDN CTP_OCORR_BDN CAG_CLIE CMAQUINA CLOC_EQUIP 
      CCPMF_BDN DCTBIL CCORRL CJUNC_DSTNO DREFERENCIA_LEGADO CIDTFD_CNTRL 
      CEMPR_RAZAO x_custom_value x_custom_rule x_action);
   
      set etls_Source end=eof;
      
      attrib x_row length = 8
         format = BEST32.
         informat = BEST32.
         label = 'Row Number'; 
      attrib x_type length = $100
         label = 'Exception Type'; 
      attrib x_column length = $100
         label = 'Column Name'; 
      attrib x_note length = $200
         label = 'Column Value'; 
      attrib x_custom_name length = $100
         label = 'Custom Name'; 
      attrib x_custom_value length = $200
         label = 'Custom Value'; 
      attrib x_custom_rule length = $250
         label = 'Custom Rule'; 
      attrib x_action length = $50
         label = 'Action Taken'; 
      attrib x_datetime length = 8
         format = nldatm.
         informat = nldatm.
         label = 'Run Time'; 
      
      i_move=0;
      retain i_excp error_rows excp_rows valid_rows cust_excp 0;
      
      x_datetime = "&etls_stepStartTime"dt;
      ETL_Error_JobRunTime = x_datetime;
      
      x_row = _n_;
      
      /*---- Custom Validation: valid_data  ----*/ 
      if (DOCORR  > DCTBIL) then 
      do; 
         x_custom_name = "valid_data: True";
         x_custom_value = "";
         x_custom_rule = "DOCORR  > DCTBIL";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (DOCORR  > DCTBIL) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Data Contábil Futura  ----*/ 
      if (DCTBIL  >= date()) then 
      do; 
         x_custom_name = "Data Contábil Futura: True";
         x_custom_value = "";
         x_custom_rule = "DCTBIL  >= date()";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (DCTBIL  >= date()) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Data de ocorrencia maior que data da  ----*/ 
      /*----  descoberta                                              ----*/ 
      if (DOCORR > DDESCB) then 
      do; 
         x_custom_name = "Data de ocorrencia maior que data da descoberta: True";
         x_custom_value = "";
         x_custom_rule = "DOCORR > DDESCB";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (DOCORR > DDESCB) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Codigo junção destino maior que 4 digitos ou  ----*/ 
      /*----  =0	                                                             ----*/ 
      if (lengthc(strip(put(CJUNC_DSTNO, 4.))) > 4 or  lengthc(strip(put(CJUNC_DSTNO, 4.))) =0) then 
      do; 
         x_custom_name = "Codigo junção destino maior que 4 digitos ou =0	: True";
         x_custom_value = "";
         x_custom_rule = "lengthc(strip(put(CJUNC_DSTNO, 4.))) > 4 or  lengthc(strip(put(CJUNC_DSTNO, 4.))) =0";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (lengthc(strip(put(CJUNC_DSTNO, 4.))) > 4 or  lengthc(strip(put(CJUNC_DSTNO, 4.))) =0) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Codigo da dependencia maior que 4 digitos ou  ----*/ 
      /*----  =0                                                              ----*/ 
      if (lengthc(strip(put(CDEPDC, 8.))) > 4 or  lengthc(strip(put(CDEPDC, 8.))) =0) then 
      do; 
         x_custom_name = "Codigo da dependencia maior que 4 digitos ou =0: True";
         x_custom_value = "";
         x_custom_rule = "lengthc(strip(put(CDEPDC, 8.))) > 4 or  lengthc(strip(put(CDEPDC, 8.))) =0";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (lengthc(strip(put(CDEPDC, 8.))) > 4 or  lengthc(strip(put(CDEPDC, 8.))) =0) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Código da correlata maior que 4 digitos ou =0  ----*/ 
      if (lengthc(strip(put(CCORRL, 8.))) > 4 or  lengthc(strip(put(CCORRL, 8.))) =0) then 
      do; 
         x_custom_name = "Código da correlata maior que 4 digitos ou =0: True";
         x_custom_value = "";
         x_custom_rule = "lengthc(strip(put(CCORRL, 8.))) > 4 or  lengthc(strip(put(CCORRL, 8.))) =0";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (lengthc(strip(put(CCORRL, 8.))) > 4 or  lengthc(strip(put(CCORRL, 8.))) =0) */
      else 
      do; 
      end;  /* else */
      
      /*---- Check for Missing value for CAG_CLIE  ----*/ 
      
      if (CAG_CLIE eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CAG_CLIE";
         x_note = CAG_CLIE;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CAG_CLIE is missing  */ 
      
      /*---- Check for Missing value for DOCORR  ----*/ 
      
      if (DOCORR eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "DOCORR";
         x_note = DOCORR;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* DOCORR is missing  */ 
      
      /*---- Check for Missing value for CCTA_CLIE  ----*/ 
      
      if (CCTA_CLIE eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CCTA_CLIE";
         x_note = CCTA_CLIE;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CCTA_CLIE is missing  */ 
      
      /*---- Check for Missing value for CRZ_CTBIL  ----*/ 
      
      if (CRZ_CTBIL eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CRZ_CTBIL";
         x_note = CRZ_CTBIL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CRZ_CTBIL is missing  */ 
      
      /*---- Check for Missing value for CCTA_CTBIL  ----*/ 
      
      if (CCTA_CTBIL eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CCTA_CTBIL";
         x_note = CCTA_CTBIL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CCTA_CTBIL is missing  */ 
      
      /*---- Check for Missing value for CTIPO_PERDA  ----*/ 
      
      if (CTIPO_PERDA eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CTIPO_PERDA";
         x_note = CTIPO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CTIPO_PERDA is missing  */ 
      
      /*---- Check for Missing value for CJUNC_DSTNO  ----*/ 
      
      if (CJUNC_DSTNO eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CJUNC_DSTNO";
         x_note = CJUNC_DSTNO;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CJUNC_DSTNO is missing  */ 
      
      /*---- Check for Missing value for CDEPDC  ----*/ 
      
      if (CDEPDC eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CDEPDC";
         x_note = CDEPDC;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CDEPDC is missing  */ 
      
      /*---- Check for Missing value for VPERDA  ----*/ 
      
      if (VPERDA eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "VPERDA";
         x_note = VPERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* VPERDA is missing  */ 
      
      /*---- Check for Missing value for VREEMB_BDN  ----*/ 
      
      if (VREEMB_BDN eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "VREEMB_BDN";
         x_note = VREEMB_BDN;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* VREEMB_BDN is missing  */ 
      
      /*---- Check for Missing value for VREEMB  ----*/ 
      
      if (VREEMB eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "VREEMB";
         x_note = VREEMB;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* VREEMB is missing  */ 
      
      /*---- Check for Missing value for CPEDIDO  ----*/ 
      
      if (CPEDIDO eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CPEDIDO";
         x_note = CPEDIDO;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CPEDIDO is missing  */ 
      
      /*---- Check for Missing value for CTP_CTA_BDN  ----*/ 
      
      if (CTP_CTA_BDN eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CTP_CTA_BDN";
         x_note = CTP_CTA_BDN;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CTP_CTA_BDN is missing  */ 
      
      /*---- Check for Missing value for DCTBIL  ----*/ 
      
      if (DCTBIL eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "DCTBIL";
         x_note = DCTBIL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* DCTBIL is missing  */ 
      
      /*---- Check for Missing value for DDESCB  ----*/ 
      
      if (DDESCB eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "DDESCB";
         x_note = DDESCB;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* DDESCB is missing  */ 
      
      
      if i_move = 0 then
      do;
        valid_rows+1;
        output etls_target;
      
      end;
      else
      if i_move = 1 then
      do;
        error_rows+1;
        output etls_Errors;
      
      end;
      if eof then 
      do; 
         /* create macro flags  */ 
         
         call symputx("m_excp", put(i_excp, 1.));
         call symputx("cust_excp", put(cust_excp,1.));
         /* total source rows processed  */ 
         call symputx("total_source_rows",trim(left(put(_N_,9.))));
         /* total rows passed validation  */ 
         call symputx("total_valid_rows",valid_rows);
         /* total error rows processed  */ 
         call symputx("total_error_rows",error_rows);
         /* total number of exceptions  */ 
         call symputx("total_excp_rows",excp_rows);
         
      end;
      
      run;
      
      data _null_;
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - SOURCE = %trim(&total_source_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - VALID RECORDS = %trim(&total_valid_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - ERROR = %trim(&total_error_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - EXCEPTION = %trim(&total_excp_rows)";
      run;
      
      /* Update/Append to permanent table - delete work table  */ 
      proc append base=work.DV_SGRE data=etls_target force;
      run;
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_target;
      quit;
      
      %let work_error_exist = %eval(%sysfunc(exist(etls_Errors, DATA)) or 
            %sysfunc(exist(etls_Errors, VIEW))); 
      
      %if &work_error_exist > 0 %then
      %do;
        proc append base=work.DV_SGRE_ERROR data=etls_Errors force;
        run;
      
         proc datasets library=work memtype=(data view) nolist nowarn;
           delete etls_Errors;
         quit;
         
      %end;
      
      proc append base=work.DV_SGRE_EXCEC data=etls_Exceptions(SORTEDBY=_NULL_) force;
      run;
      
      
      %makeReport; 
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_Exceptions;
      quit;
      
      
      
      %goto STEP_CONTINUE;
      
      %STEP_ERR:
      
         %let sysrc = 9999; 
         %rcSet(&sysrc); 
         
      %STEP_CONTINUE:
      
      %mend etls_Validate;
      %etls_Validate;
      
      /*---- Start of Post-Process Code  ----*/ 
            
            %macro verificaErros;
             
            	/*Verifica se a tabela de erros foi criada*/
            	%contaRegistros(_dataSet=WORK.DV_SGRE_EXCEC);
             
            	/*Verifica se existe erros na tabela de erros*/
            	%if &numObs > 0 %then %do;
            
            		%moveArquivo(dirorig="4859-SGRE",arqorig="SGREROCI.TXT",dir="REJEITADOS");
            		%moveArquivo(dirorig="4859-SGRE",arqorig="SGRERECUP.txt",dir="REJEITADOS");
            			/*Grava os erros na tabela de Erros*/
            		%gerarTabelaErro(_dataSetHist=EGRC_ERR.TERRO_SGRE, _dataSet=WORK.DV_SGRE_EXCEC, _tamanhoHist=12, _dataHist=DCTBIL);
            		/*Envia um email para o responsável comunicando os erros*/
            		%enviaEmail;
            		%let job_rc = 8000;
            		%Fim_Processo;
            	%end;
            	/*Aborta o Job caso exista erros*/
            	%abortaExecucao(_status=&numObs);
             
            %mend verificaErros;
            
            %verificaErros;
            /*---- End of Post-Process Code  ----*/ 
            
            %rcSet(&syserr); 
            %rcSet(&sqlrc); 
            
            
            
            /**  Step end Data Validation **/
            
            /*==========================================================================* 
 * Step:            Join                                  A5J3RISO.AC000160 * 
 * Transform:       Join                                                    * 
 * Description:     Carimbos                                                * 
 *                                                                          * 
 * Source Tables:   Valid records table - work.DV_SGRE    A5J3RISO.AI0001B4 * 
 *                  REGRA_SGRE - RO_PARAM.REGRA_SGRE      A5J3RISO.AQ00009G * 
 *                  TEVNTO_PERDA_CTA -                    A5J3RISO.AQ00009L * 
 *                   RO_PARAM.TEVNTO_PERDA_CTA                              * 
 * Target Table:    Join - work.Sgre_carimb               A5J3RISO.AI0001B7 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000160);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for EGRC_RO_PARAMETROS  */ 
LIBNAME RO_PARAM BASE "/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/PARAMETROS/TABELA" filelockwait = 600 ;
%rcSet(&syslibrc); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.DV_SGRE, DATA)) or 
         %sysfunc(exist(work.DV_SGRE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.DV_SGRE out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete Sgre_carimb;
quit;

proc sql;
   create view work.Sgre_carimb as
   select
      DV_SGRE.DOCORR length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      DV_SGRE.RHIST length = 30,
      DV_SGRE.DDESCB length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      DV_SGRE.CCTA_CLIE length = 8,
      TEVNTO_PERDA_CTA.CLIN_NEGOC length = 3,
      DV_SGRE.CCORRL length = 8,
      DV_SGRE.CRZ_CTBIL length = 8,
      DV_SGRE.CCTA_CTBIL length = 8,
      DV_SGRE.CTIPO_PERDA length = 2,
      DV_SGRE.CJUNC_DSTNO length = 8,
      DV_SGRE.CDEPDC length = 8,
      DV_SGRE.VPERDA length = 8   
         format = 13.2
         informat = 13.2,
      DV_SGRE.VREEMB_BDN length = 8   
         format = 13.2
         informat = 13.2,
      DV_SGRE.VREEMB length = 8   
         format = 13.2
         informat = 13.2,
      DV_SGRE.VCPMF_TRANS length = 8   
         format = 13.2
         informat = 13.2,
      DV_SGRE.CPEDIDO length = 26,
      DV_SGRE.CTP_CTA_BDN length = 8,
      DV_SGRE.CTP_OCORR_BDN length = 8,
      DV_SGRE.CAG_CLIE length = 8,
      DV_SGRE.CMAQUINA length = 8,
      DV_SGRE.CLOC_EQUIP length = 8,
      DV_SGRE.CCPMF_BDN length = 8,
      DV_SGRE.DCTBIL length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      REGRA_SGRE.CGRP_ATGDO_PERDA length = 8   
         format = 1.
         informat = 1.,
      REGRA_SGRE.CSGRP_ATGDO_PERDA length = 6   
         format = $6.
         informat = $6.,
      REGRA_SGRE.CCAUSA_ATGDO_PERDA length = 3   
         format = $4.
         informat = $4.,
      REGRA_SGRE.CEVNTO_PERDA length = 8,
      DV_SGRE.DREFERENCIA_LEGADO length = 8   
         format = 8.
         informat = 8.
         label = 'dtReferenciaLegado',
      DV_SGRE.IARQUIVO_LEGADO length = 255   
         format = $255.
         informat = $255.
         label = 'nmArquivoLegado',
      DV_SGRE.CIDTFD_CNTRL length = 50   
         format = $50.
         informat = $50.
         label = 'cdIdentificadorCentral',
      DV_SGRE.CEMPR_RAZAO length = 8   
         format = 8.
         informat = 8.
         label = 'cdEmpresaRazao'
   from
      work.DV_SGRE as DV_SGRE left join 
      RO_PARAM.REGRA_SGRE as REGRA_SGRE
         on
         (
            DV_SGRE.CRZ_CTBIL = REGRA_SGRE.CRZ_CTBIL
            and DV_SGRE.CCTA_CTBIL = REGRA_SGRE.CCTA_CTBIL
         ) left join 
      RO_PARAM.TEVNTO_PERDA_CTA as TEVNTO_PERDA_CTA
         on
         (
            DV_SGRE.CDEPDC = TEVNTO_PERDA_CTA.CDEPDC
            and DV_SGRE.DCTBIL >= TEVNTO_PERDA_CTA.DABERT
            and DV_SGRE.DCTBIL < TEVNTO_PERDA_CTA.DENCRR
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Join **/

/*==========================================================================* 
 * Step:            Extract                               A5J3RISO.AC000161 * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 * Target Table:    Extract - work.TWSGREHIST             A5J3RISO.AI0001B8 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000161);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for EGRC_RO_REP  */ 
LIBNAME RO_REP BASE "/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/REPOSITORIO/TABELA" filelockwait=600 ;
%rcSet(&syslibrc); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_REP.TREP_PERDAS_OP, DATA)) or 
         %sysfunc(exist(RO_REP.TREP_PERDAS_OP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_REP.TREP_PERDAS_OP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(RO_REP.TREP_PERDAS_OP); 

%let ETLS_SYSLAST = &SYSLAST;
/*---- Start of Pre-Process Code  ----*/ 





/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

%let SYSLAST = &ETLS_SYSLAST;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete TWSGREHIST;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.TWSGREHIST as
      select
         DOCORR   
            informat = DDMMYY10.,
         RHIST   
            informat = $3410.,
         DDESCB   
            informat = DDMMYY10.,
         CCTA_CLIE   
            format = 13.
            informat = 13.,
         CCORRL   
            format = 4.
            informat = 4.,
         (INPUT(CRZ_CTBIL,BEST32.)) as CRZ_CTBIL length = 8
            format = 13.
            informat = 13.,
         (INPUT(CCTA_CTBIL,BEST32.)) as CCTA_CTBIL length = 8
            format = 13.
            informat = 13.,
         CTIPO_PERDA   
            informat = $2.,
         CJUNC_DSTNO   
            format = 5.
            informat = 5.,
         CDEPDC   
            format = 5.
            informat = 5.,
         VPERDA   
            format = 13.2
            informat = 13.2,
         VREEMB_BDN   
            format = 13.2
            informat = 13.2,
         VREEMB   
            format = 13.2
            informat = 13.2,
         VCPMF_TRANS   
            format = 13.2
            informat = 13.2,
         CPEDIDO   
            informat = $26.,
         CTIPO_CTA_BDN,
         CTIPO_OCORR_BDN,
         CAG_CLIE   
            format = 5.
            informat = 5.,
         CMAQUINA   
            format = 7.
            informat = 7.,
         CLOC_EQUIP   
            format = 1.
            informat = 1.,
         CCPMF_BDN   
            format = 1.
            informat = 1.,
         DCTBIL   
            informat = DDMMYY10.,
         CIDTFD_CNTRL,
         CGRP_ATGDO_PERDA   
            format = BEST16.
            label = 'GRP_ATPERDA',
         CSGRP_ATGDO_PERDA   
            informat = $8.
            label = 'SUBGRP_ATPERDA',
         CCAUSA_ATGDO_PERDA   
            informat = $8.,
         CEVNTO_PERDA   
            informat = $10.,
         CLIN_NEGOC,
         CEMPR_RAZAO,
         DREFERENCIA_LEGADO,
         IARQUIVO_LEGADO
   from &SYSLAST
      where IARQUIVO_LEGADO = "SGREROCI";
   ;
quit;

%let SYSLAST = work.TWSGREHIST;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 

/*---- Start of Post-Process Code  ----*/ 


/*---- End of Post-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Append                                A5J3RISO.AC000162 * 
 * Transform:       Append                                                  * 
 * Description:     HIST + MES                                              * 
 *                                                                          * 
 * Source Tables:   Join - work.Sgre_carimb               A5J3RISO.AI0001B7 * 
 *                  Extract - work.TWSGREHIST             A5J3RISO.AI0001B8 * 
 * Target Table:    Append - work.APEND_HIST_MES          A5J3RISO.AI0001B9 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000162);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.Sgre_carimb, DATA)) or 
      %sysfunc(exist(work.Sgre_carimb, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2S71XBL;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W2S71XBL as
      select
         DOCORR,
         RHIST length = 3410,
         DDESCB,
         CCTA_CLIE,
         CCORRL,
         CRZ_CTBIL,
         CCTA_CTBIL,
         CTIPO_PERDA,
         CJUNC_DSTNO,
         CDEPDC,
         VPERDA,
         VREEMB_BDN,
         VREEMB,
         VCPMF_TRANS,
         CPEDIDO,
         CTP_CTA_BDN,
         CTP_OCORR_BDN,
         CMAQUINA,
         CLOC_EQUIP,
         CCPMF_BDN,
         DCTBIL,
         CIDTFD_CNTRL,
         CGRP_ATGDO_PERDA,
         CSGRP_ATGDO_PERDA length = 8   
            format = $8.
            informat = $8.,
         CCAUSA_ATGDO_PERDA length = 8   
            format = $8.
            informat = $8.,
         CEVNTO_PERDA length = 10   
            format = $10.
            informat = $10.,
         CLIN_NEGOC   
            format = $3.
            informat = $3.,
         CAG_CLIE,
         DREFERENCIA_LEGADO,
         IARQUIVO_LEGADO,
         CEMPR_RAZAO
   from work.Sgre_carimb
   ;
quit;

%let SYSLAST = work.W2S71XBL;

%let dbxrc = %eval(%sysfunc(exist(work.TWSGREHIST, DATA)) or 
      %sysfunc(exist(work.TWSGREHIST, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2S71XBT;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W2S71XBT as
      select
         DOCORR   
            informat = DDMMYY8.,
         RHIST,
         DDESCB   
            informat = DDMMYY8.,
         CCTA_CLIE,
         CCORRL,
         CRZ_CTBIL,
         CCTA_CTBIL,
         CTIPO_PERDA,
         CJUNC_DSTNO,
         CDEPDC,
         VPERDA,
         VREEMB_BDN,
         VREEMB,
         VCPMF_TRANS,
         CPEDIDO,
         CTIPO_CTA_BDN as CTP_CTA_BDN,
         CTIPO_OCORR_BDN as CTP_OCORR_BDN,
         CMAQUINA,
         CLOC_EQUIP,
         CCPMF_BDN,
         DCTBIL   
            informat = DDMMYY8.,
         CIDTFD_CNTRL,
         CGRP_ATGDO_PERDA   
            format = 1.
            informat = 1.,
         CSGRP_ATGDO_PERDA,
         CCAUSA_ATGDO_PERDA,
         CEVNTO_PERDA,
         CLIN_NEGOC,
         CAG_CLIE,
         DREFERENCIA_LEGADO   
            informat = 8.
            label = 'dtReferenciaLegado',
         IARQUIVO_LEGADO   
            informat = $255.
            label = 'nmArquivoLegado',
         CEMPR_RAZAO   
            informat = 8.
            label = 'cdEmpresaRazao'
   from work.TWSGREHIST
   ;
quit;

%let SYSLAST = work.W2S71XBT;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete APEND_HIST_MES;
quit;

data work.APEND_HIST_MES;
   set work.W2S71XBL
       work.W2S71XBT;
   keep DOCORR RHIST DDESCB CCTA_CLIE CCORRL CRZ_CTBIL CCTA_CTBIL CTIPO_PERDA 
    CJUNC_DSTNO CDEPDC VPERDA VREEMB_BDN VREEMB VCPMF_TRANS CPEDIDO CTP_CTA_BDN 
    CTP_OCORR_BDN CMAQUINA CLOC_EQUIP CCPMF_BDN DCTBIL CIDTFD_CNTRL 
    CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CEVNTO_PERDA CLIN_NEGOC 
    CAG_CLIE DREFERENCIA_LEGADO IARQUIVO_LEGADO CEMPR_RAZAO; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Extract                               A5J3RISO.AC000163 * 
 * Transform:       Extract                                                 * 
 * Description:     Retira linhas em branco                                 * 
 *                                                                          * 
 * Source Table:    TSGRE_PERDA_RECUP -                   A5J3RISO.AQ00007T * 
 *                   RO_PRE.TSGRE_PERDA_RECUP                               * 
 * Target Table:    Extract - work.TWRECUP_PERDA2         A5J3RISO.AI0001BA * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000163);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_PRE.TSGRE_PERDA_RECUP, DATA)) or 
         %sysfunc(exist(RO_PRE.TSGRE_PERDA_RECUP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_PRE.TSGRE_PERDA_RECUP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(RO_PRE.TSGRE_PERDA_RECUP); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete TWRECUP_PERDA2;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.TWRECUP_PERDA2 as
      select
         CDEPDC,
         DCTBIL,
         CRZ_CTBIL,
         CCTA_CTBIL,
         (sum(VRECUP_ESTORNO)) as VRECUP_ESTORNO length = 8
            format = commax12.2
            informat = commax12.,
         CTIPO_PERDA,
         CPEDIDO,
         ("SGREROCI") as IARQUIVO_LEGADO length = 255
            format = $255.
            informat = $255.
            label = 'nmArquivoLegado',
         (input(put(year(DCTBIL),4.)||compress(put(month(DCTBIL),z2.))||"01",8.)) as DREFERENCIA_LEGADO length = 8
            format = 8.
            informat = 8.
            label = 'dtReferenciaLegado'
   from &SYSLAST
   group by
      CDEPDC,
      DCTBIL,
      CRZ_CTBIL,
      CCTA_CTBIL,
      CTIPO_PERDA,
      CPEDIDO
   ;
quit;

%let SYSLAST = work.TWRECUP_PERDA2;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Join                                  A5J3RISO.AC000164 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Extract - work.TWRECUP_PERDA2         A5J3RISO.AI0001BA * 
 *                  REGRA_SGRE - RO_PARAM.REGRA_SGRE      A5J3RISO.AQ00009G * 
 *                  TEVNTO_PERDA_CTA -                    A5J3RISO.AQ00009L * 
 *                   RO_PARAM.TEVNTO_PERDA_CTA                              * 
 * Target Table:    Join - work.WTTVV3O                   A5J3RISO.AI0001BB * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000164);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete WTTVV3O;
quit;

proc sql;
   create view work.WTTVV3O as
   select
      TWRECUP_PERDA2.CDEPDC length = 8   
         format = 4.
         informat = 4.,
      TWRECUP_PERDA2.DCTBIL length = 8   
         format = ddmmyy10.
         informat = ddmmyy10.,
      TWRECUP_PERDA2.CRZ_CTBIL length = 8   
         format = 4.
         informat = 4.,
      TWRECUP_PERDA2.CCTA_CTBIL length = 8,
      TWRECUP_PERDA2.VRECUP_ESTORNO length = 8   
         format = commax12.2
         informat = commax12.,
      TWRECUP_PERDA2.CTIPO_PERDA length = 2   
         format = $2.
         informat = $2.,
      TWRECUP_PERDA2.CPEDIDO length = 26,
      REGRA_SGRE.CGRP_ATGDO_PERDA length = 8   
         format = 1.
         informat = 1.,
      REGRA_SGRE.CSGRP_ATGDO_PERDA length = 6   
         format = $6.
         informat = $6.,
      REGRA_SGRE.CCAUSA_ATGDO_PERDA length = 3   
         format = $4.
         informat = $4.,
      REGRA_SGRE.CEVNTO_PERDA length = 8   
         format = $8.
         informat = $8.,
      TWRECUP_PERDA2.IARQUIVO_LEGADO length = 255   
         format = $255.
         informat = $255.
         label = 'nmArquivoLegado',
      TWRECUP_PERDA2.DREFERENCIA_LEGADO length = 8   
         format = 8.
         informat = 8.
         label = 'dtReferenciaLegado',
      TEVNTO_PERDA_CTA.CLIN_NEGOC length = 3   
         format = $3.
         informat = $3.
         label = 'cdLinhaNegocio'
   from
      work.TWRECUP_PERDA2 as TWRECUP_PERDA2 left join 
      RO_PARAM.REGRA_SGRE as REGRA_SGRE
         on
         (
            TWRECUP_PERDA2.CRZ_CTBIL = REGRA_SGRE.CRZ_CTBIL
            and TWRECUP_PERDA2.CCTA_CTBIL = REGRA_SGRE.CCTA_CTBIL
         ) left join 
      RO_PARAM.TEVNTO_PERDA_CTA as TEVNTO_PERDA_CTA
         on
         (
            TWRECUP_PERDA2.CDEPDC = TEVNTO_PERDA_CTA.CDEPDC
         )
   where
      TWRECUP_PERDA2.DCTBIL >= TEVNTO_PERDA_CTA.DABERT
      and TWRECUP_PERDA2.DCTBIL < TEVNTO_PERDA_CTA.DENCRR
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Join **/

/*==========================================================================* 
 * Step:            Data Validation                       A5J3RISO.AC000165 * 
 * Transform:       Data Validation                                         * 
 * Description:     Registra na tabela de erros do arquivo do SGRE RECUP e  * 
 *                   envia por email                                        * 
 *                                                                          * 
 * Source Table:    Join - work.WTTVV3O                   A5J3RISO.AI0001BB * 
 * Target Tables:   Valid records table -                 A5J3RISO.AI0001BC * 
 *                   work.DV_SGRE_RECUP                                     * 
 *                  Error records table -                 A5J3RISO.AI0001BD * 
 *                   work.DV_SGRE_RECUP_ERROR                               * 
 *                  Exception records table -             A5J3RISO.AI0001BE * 
 *                   work.DV_SGRE_RECUP_EXCE                                * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000165);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.WTTVV3O); 

proc datasets library=work nolist nowarn memtype=(data view);
 delete etls_Errors etls_Exceptions etls_target;
quit;

%macro etls_Validate; 

   /* Create SAS work table from source table  */ 
   proc sql;
   create table etls_Source as
    select *
    from work.WTTVV3O
   ;
   quit;
   
   %let runTime = %sysfunc(datetime()); 
   
   /* Create the Exception Report  */ 
   %macro makeReport; 
   
      %if (&m_excp eq 1) %then 
      %do; 
         options nodate; 
         
         proc sort data = etls_Exceptions; 
            by x_row; 
         run; 
         
         proc print data = etls_Exceptions noobs label; 
            title1 "Exceptions Found in Table: work.WTTVV3O"; 
            title2 "%sysfunc(datetime(),nldatmap.)"; 
         run; 
         
         options date; 
         
      %end; 
      
   %mend makeReport; 
   
   /* Delete error tables prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE_RECUP_ERROR;
   quit;
   
   /* Delete exception table prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE_RECUP_EXCE;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE_RECUP;
   quit;
   
   %let m_excp = 0;
   %let cust_exp=0; 
   
   /*---- Begin checks for Custom, Missing Values, and Invalid Values  ----*/ 
   
   data etls_target
      (keep = CDEPDC DCTBIL CRZ_CTBIL CCTA_CTBIL VRECUP_ESTORNO CTIPO_PERDA CPEDIDO 
      CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CEVNTO_PERDA 
      IARQUIVO_LEGADO DREFERENCIA_LEGADO CLIN_NEGOC)
     etls_Errors
      (keep = CDEPDC DCTBIL CRZ_CTBIL CCTA_CTBIL VRECUP_ESTORNO CTIPO_PERDA CPEDIDO 
      CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CEVNTO_PERDA 
      DREFERENCIA_LEGADO)
     etls_Exceptions
      (keep = x_row x_type x_column x_note x_custom_name x_datetime CDEPDC DCTBIL CRZ_CTBIL 
      CCTA_CTBIL VRECUP_ESTORNO CTIPO_PERDA CPEDIDO CGRP_ATGDO_PERDA 
      CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CEVNTO_PERDA x_custom_value x_custom_rule 
      x_action DREFERENCIA_LEGADO);
   
      set etls_Source end=eof;
      
      attrib x_row length = 8
         format = BEST32.
         informat = BEST32.
         label = 'Row Number'; 
      attrib x_type length = $100
         label = 'Exception Type'; 
      attrib x_column length = $100
         label = 'Column Name'; 
      attrib x_note length = $200
         label = 'Column Value'; 
      attrib x_custom_name length = $100
         label = 'Custom Name'; 
      attrib x_custom_value length = $200
         label = 'Custom Value'; 
      attrib x_custom_rule length = $250
         label = 'Custom Rule'; 
      attrib x_action length = $50
         label = 'Action Taken'; 
      attrib x_datetime length = 8
         format = nldatm.
         informat = nldatm.
         label = 'Run Time'; 
      
      i_move=0;
      retain i_excp error_rows excp_rows valid_rows cust_excp 0;
      
      x_datetime = "&etls_stepStartTime"dt;
      ETL_Error_JobRunTime = x_datetime;
      
      x_row = _n_;
      
      /*---- Custom Validation: Código da dependencia maior que 4 digitos  ----*/ 
      if (lengthc(strip(put(CDEPDC, 7.))) > 4) then 
      do; 
         x_custom_name = "Código da dependencia maior que 4 digitos: True";
         x_custom_value = "";
         x_custom_rule = "lengthc(strip(put(CDEPDC, 7.))) > 4";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (lengthc(strip(put(CDEPDC, 7.))) > 4) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Dt Contábil Futura  ----*/ 
      if (DCTBIL  >= date()) then 
      do; 
         x_custom_name = "Dt Contábil Futura: True";
         x_custom_value = "";
         x_custom_rule = "DCTBIL  >= date()";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (DCTBIL  >= date()) */
      else 
      do; 
      end;  /* else */
      
      /*---- Check for Missing value for CCTA_CTBIL  ----*/ 
      
      if (CCTA_CTBIL eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CCTA_CTBIL";
         x_note = CCTA_CTBIL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CCTA_CTBIL is missing  */ 
      
      /*---- Check for Missing value for CDEPDC  ----*/ 
      
      if (CDEPDC eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CDEPDC";
         x_note = CDEPDC;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CDEPDC is missing  */ 
      
      /*---- Check for Missing value for CPEDIDO  ----*/ 
      
      if (CPEDIDO eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CPEDIDO";
         x_note = CPEDIDO;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CPEDIDO is missing  */ 
      
      /*---- Check for Missing value for CRZ_CTBIL  ----*/ 
      
      if (CRZ_CTBIL eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CRZ_CTBIL";
         x_note = CRZ_CTBIL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CRZ_CTBIL is missing  */ 
      
      /*---- Check for Missing value for CTIPO_PERDA  ----*/ 
      
      if (CTIPO_PERDA eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CTIPO_PERDA";
         x_note = CTIPO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CTIPO_PERDA is missing  */ 
      
      /*---- Check for Missing value for DCTBIL  ----*/ 
      
      if (DCTBIL eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "DCTBIL";
         x_note = DCTBIL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* DCTBIL is missing  */ 
      
      /*---- Check for Missing value for VRECUP_ESTORNO  ----*/ 
      
      if (VRECUP_ESTORNO eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "VRECUP_ESTORNO";
         x_note = VRECUP_ESTORNO;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* VRECUP_ESTORNO is missing  */ 
      
      
      if i_move = 0 then
      do;
        valid_rows+1;
        output etls_target;
      
      end;
      else
      if i_move = 1 then
      do;
        error_rows+1;
        output etls_Errors;
      
      end;
      if eof then 
      do; 
         /* create macro flags  */ 
         
         call symputx("m_excp", put(i_excp, 1.));
         call symputx("cust_excp", put(cust_excp,1.));
         /* total source rows processed  */ 
         call symputx("total_source_rows",trim(left(put(_N_,9.))));
         /* total rows passed validation  */ 
         call symputx("total_valid_rows",valid_rows);
         /* total error rows processed  */ 
         call symputx("total_error_rows",error_rows);
         /* total number of exceptions  */ 
         call symputx("total_excp_rows",excp_rows);
         
      end;
      
      run;
      
      data _null_;
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - SOURCE = %trim(&total_source_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - VALID RECORDS = %trim(&total_valid_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - ERROR = %trim(&total_error_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - EXCEPTION = %trim(&total_excp_rows)";
      run;
      
      /* Update/Append to permanent table - delete work table  */ 
      proc append base=work.DV_SGRE_RECUP data=etls_target force;
      run;
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_target;
      quit;
      
      %let work_error_exist = %eval(%sysfunc(exist(etls_Errors, DATA)) or 
            %sysfunc(exist(etls_Errors, VIEW))); 
      
      %if &work_error_exist > 0 %then
      %do;
        proc append base=work.DV_SGRE_RECUP_ERROR data=etls_Errors force;
        run;
      
         proc datasets library=work memtype=(data view) nolist nowarn;
           delete etls_Errors;
         quit;
         
      %end;
      
      proc append base=work.DV_SGRE_RECUP_EXCE data=etls_Exceptions(SORTEDBY=_NULL_) force;
      run;
      
      
      %makeReport; 
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_Exceptions;
      quit;
      
      
      
      %goto STEP_CONTINUE;
      
      %STEP_ERR:
      
         %let sysrc = 9999; 
         %rcSet(&sysrc); 
         
      %STEP_CONTINUE:
      
      %mend etls_Validate;
      %etls_Validate;
      
      /*---- Start of Post-Process Code  ----*/ 
            
            %macro verificaErros;
             
            	/*Verifica se a tabela de erros foi criada*/
            	%contaRegistros(_dataSet=WORK.DV_SGRE_RECUP_EXCE);
             
            	/*Verifica se existe erros na tabela de erros*/
            	%if &numObs > 0 %then %do;
            	
            		%moveArquivo(dirorig="4859-SGRE",arqorig="SGREROCI.TXT",dir="REJEITADOS");
            		%moveArquivo(dirorig="4859-SGRE",arqorig="SGRERECUP.txt",dir="REJEITADOS");
            		/*Grava os erros na tabela de Erros*/
            		%gerarTabelaErro(_dataSetHist=EGRC_ERR.TERRO_SGRE, _dataSet=WORK.DV_SGRE_RECUP_EXCE, _tamanhoHist=12, _dataHist=DCTBIL);
            		/*Cria o resumo do erro*/
            		%geraResumo_erro(_dataSet=WORK.DV_SGRE_RECUP_EXCE, _errDataSet=TERRO_SGRE);
            		/*Envia o resumo para o email*/
            		%emailErro();
            		%let job_rc = 8000;
            		%Fim_Processo;
            	%end;
            	/*Aborta o Job caso exista erros*/
            	%abortaExecucao(_status=&numObs);
             
            %mend verificaErros;
            
            %verificaErros;
            /*---- End of Post-Process Code  ----*/ 
            
            %rcSet(&syserr); 
            %rcSet(&sqlrc); 
            
            
            
            /**  Step end Data Validation **/
            
            /*==========================================================================* 
 * Step:            Extract                               A5J3RISO.AC000166 * 
 * Transform:       Extract                                                 * 
 * Description:     Extrai tipo 1                                           * 
 *                                                                          * 
 * Source Table:    Append - work.APEND_HIST_MES          A5J3RISO.AI0001B9 * 
 * Target Table:    Extract - work.TWSGRE_TP1             A5J3RISO.AI0001BF * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000166);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.APEND_HIST_MES, DATA)) or 
         %sysfunc(exist(work.APEND_HIST_MES, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.APEND_HIST_MES out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.APEND_HIST_MES); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete TWSGRE_TP1;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.TWSGRE_TP1 as
      select
         CTIPO_PERDA   
            format = $2.
            informat = $2.,
         CPEDIDO   
            format = $26.
            informat = $26.,
         (sum(VPERDA)) as SVPERDA length = 8
            format = 13.2
            informat = 13.2,
         DOCORR,
         RHIST,
         DDESCB,
         CCTA_CLIE,
         CCORRL,
         CRZ_CTBIL,
         CCTA_CTBIL,
         CJUNC_DSTNO,
         CDEPDC,
         VPERDA,
         VREEMB_BDN,
         VREEMB,
         VCPMF_TRANS,
         CTP_CTA_BDN,
         CTP_OCORR_BDN,
         CMAQUINA,
         CLOC_EQUIP,
         CCPMF_BDN,
         DCTBIL,
         CIDTFD_CNTRL,
         CGRP_ATGDO_PERDA,
         CSGRP_ATGDO_PERDA,
         CCAUSA_ATGDO_PERDA,
         CEVNTO_PERDA,
         CLIN_NEGOC,
         CAG_CLIE,
         DREFERENCIA_LEGADO,
         IARQUIVO_LEGADO,
         CEMPR_RAZAO
   from &SYSLAST
      where CTIPO_PERDA = '1'
   group by
      CPEDIDO
   ;
quit;

%let SYSLAST = work.TWSGRE_TP1;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Join                                  A5J3RISO.AC000167 * 
 * Transform:       Join                                                    * 
 * Description:     Assume Carimbos                                         * 
 *                                                                          * 
 * Source Tables:   Valid records table -                 A5J3RISO.AI0001BC * 
 *                   work.DV_SGRE_RECUP                                     * 
 *                  Append - work.APEND_HIST_MES          A5J3RISO.AI0001B9 * 
 * Target Table:    Join - work.DV_SGRE_RECUP_CARIMB      A5J3RISO.AI0001BG * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000167);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.DV_SGRE_RECUP, DATA)) or 
         %sysfunc(exist(work.DV_SGRE_RECUP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.DV_SGRE_RECUP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete DV_SGRE_RECUP_CARIMB;
quit;

proc sql;
   create view work.DV_SGRE_RECUP_CARIMB as
   select distinct
      DV_SGRE_RECUP.CDEPDC length = 8   
         format = 4.
         informat = 4.,
      DV_SGRE_RECUP.DCTBIL length = 8   
         format = ddmmyy10.
         informat = ddmmyy10.,
      DV_SGRE_RECUP.CRZ_CTBIL length = 8   
         format = 4.
         informat = 4.,
      DV_SGRE_RECUP.CCTA_CTBIL length = 8,
      DV_SGRE_RECUP.VRECUP_ESTORNO length = 8   
         format = commax12.2
         informat = commax12.,
      DV_SGRE_RECUP.CTIPO_PERDA length = 2   
         format = $2.
         informat = $2.,
      DV_SGRE_RECUP.CPEDIDO length = 26,
      APEND_HIST_MES.DOCORR length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      APEND_HIST_MES.CCORRL length = 8,
      APEND_HIST_MES.CJUNC_DSTNO length = 8,
      APEND_HIST_MES.CIDTFD_CNTRL length = 50   
         format = $50.
         informat = $50.,
      COALESCE(DV_SGRE_RECUP.CGRP_ATGDO_PERDA ,APEND_HIST_MES.CGRP_ATGDO_PERDA ) as CGRP_ATGDO_PERDA length = 8   
         format = 1.
         informat = 1.,
      COALESCE(DV_SGRE_RECUP.CSGRP_ATGDO_PERDA , APEND_HIST_MES.CSGRP_ATGDO_PERDA ) as CSGRP_ATGDO_PERDA length = 6   
         format = $6.
         informat = $6.,
      COALESCE(DV_SGRE_RECUP.CCAUSA_ATGDO_PERDA , APEND_HIST_MES.CCAUSA_ATGDO_PERDA) as CCAUSA_ATGDO_PERDA length = 3   
         format = $4.
         informat = $4.,
      COALESCE(DV_SGRE_RECUP.CEVNTO_PERDA ,APEND_HIST_MES.CEVNTO_PERDA ) as CEVNTO_PERDA length = 8,
      COALESCE(DV_SGRE_RECUP.CLIN_NEGOC,APEND_HIST_MES.CLIN_NEGOC) as CLIN_NEGOC length = 3   
         format = $3.
         informat = $3.,
      APEND_HIST_MES.CEMPR_RAZAO length = 8   
         format = 8.
         informat = 8.
         label = 'cdEmpresaRazao',
      APEND_HIST_MES.RHIST length = 3410,
      APEND_HIST_MES.DDESCB length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      APEND_HIST_MES.CCTA_CLIE length = 8,
      APEND_HIST_MES.VPERDA length = 8   
         format = 13.2
         informat = 13.2,
      APEND_HIST_MES.VREEMB_BDN length = 8   
         format = 13.2
         informat = 13.2,
      APEND_HIST_MES.VREEMB length = 8   
         format = 13.2
         informat = 13.2,
      APEND_HIST_MES.VCPMF_TRANS length = 8   
         format = 13.2
         informat = 13.2,
      APEND_HIST_MES.CTP_CTA_BDN length = 8,
      APEND_HIST_MES.CTP_OCORR_BDN length = 8,
      APEND_HIST_MES.CAG_CLIE length = 8,
      APEND_HIST_MES.CMAQUINA length = 8,
      APEND_HIST_MES.CLOC_EQUIP length = 8,
      APEND_HIST_MES.CCPMF_BDN length = 8,
      DV_SGRE_RECUP.IARQUIVO_LEGADO length = 255   
         format = $255.
         informat = $255.
         label = 'nmArquivoLegado',
      DV_SGRE_RECUP.DREFERENCIA_LEGADO length = 8   
         format = 8.
         informat = 8.
         label = 'dtReferenciaLegado'
   from
      work.DV_SGRE_RECUP as DV_SGRE_RECUP left join 
      work.APEND_HIST_MES as APEND_HIST_MES
         on
         (
            DV_SGRE_RECUP.CPEDIDO = APEND_HIST_MES.CPEDIDO
            and APEND_HIST_MES.CTIPO_PERDA IN ('1', '7D')
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Join **/

/*==========================================================================* 
 * Step:            Join                                  A5J3RISO.AC000168 * 
 * Transform:       Join                                                    * 
 * Description:     7C para 7D                                              * 
 *                                                                          * 
 * Source Tables:   Extract - work.TWSGRE_TP1             A5J3RISO.AI0001BF * 
 *                  Valid records table -                 A5J3RISO.AI0001BC * 
 *                   work.DV_SGRE_RECUP                                     * 
 * Target Table:    Join - work.TWSGRE_7C_7D              A5J3RISO.AI0001BH * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000168);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete TWSGRE_7C_7D;
quit;

proc sql;
   create view work.TWSGRE_7C_7D as
   select distinct
      '7D' as CTIPO_PERDA length = 2   
         format = $2.
         informat = $2.,
      W3AX7AK.CPEDIDO length = 26   
         format = $26.
         informat = $26.,
      W3AX7AK.SVPERDA length = 8   
         format = 13.2
         informat = 13.2,
      W3AX7AK.DOCORR length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      W3AX7AK.RHIST length = 3410,
      W3AX7AK.DDESCB length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      W3AX7AK.CCTA_CLIE length = 8,
      W3AX7AK.CCORRL length = 8,
      W3AX7AK.CRZ_CTBIL length = 8,
      W3AX7AK.CCTA_CTBIL length = 8,
      W3AX7AK.CJUNC_DSTNO length = 8,
      W3AX7AK.CDEPDC length = 8,
      W3AX7AK.VPERDA length = 8   
         format = 13.2
         informat = 13.2,
      W3AX7AK.VREEMB_BDN length = 8   
         format = 13.2
         informat = 13.2,
      W3AX7AK.VREEMB length = 8   
         format = 13.2
         informat = 13.2,
      W3AX7AK.VCPMF_TRANS length = 8   
         format = 13.2
         informat = 13.2,
      W3AX7AK.CTP_CTA_BDN length = 8,
      W3AX7AK.CTP_OCORR_BDN length = 8,
      W3AX7AK.CMAQUINA length = 8,
      W3AX7AK.CLOC_EQUIP length = 8,
      W3AX7AK.CCPMF_BDN length = 8,
      W3AX7AK.DCTBIL length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      W3AX7AK.CIDTFD_CNTRL length = 50   
         format = $50.
         informat = $50.,
      W3AX7AK.CGRP_ATGDO_PERDA length = 8   
         format = 1.
         informat = 1.,
      W3AX7AK.CSGRP_ATGDO_PERDA length = 8   
         format = $8.
         informat = $8.,
      W3AX7AK.CCAUSA_ATGDO_PERDA length = 8   
         format = $8.
         informat = $8.,
      W3AX7AK.CEVNTO_PERDA length = 10   
         format = $10.
         informat = $10.,
      W3AX7AK.CLIN_NEGOC length = 3   
         format = $3.
         informat = $3.,
      W3AX7AK.CAG_CLIE length = 8,
      W3AX7AK.DREFERENCIA_LEGADO length = 8   
         format = 8.
         informat = 8.
         label = 'dtReferenciaLegado',
      W3AX7AK.IARQUIVO_LEGADO length = 255   
         format = $255.
         informat = $255.
         label = 'nmArquivoLegado',
      W3AX7AK.CEMPR_RAZAO length = 8   
         format = 8.
         informat = 8.
         label = 'cdEmpresaRazao'
   from
      work.TWSGRE_TP1 as W3AX7AK, 
      work.DV_SGRE_RECUP as DV_SGRE_RECUP
   where
      W3AX7AK.CPEDIDO = DV_SGRE_RECUP.CPEDIDO
      and DV_SGRE_RECUP.CTIPO_PERDA = '7C'
      and W3AX7AK.SVPERDA = DV_SGRE_RECUP.VRECUP_ESTORNO
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Join **/

/*==========================================================================* 
 * Step:            Join                                  A5J3RISO.AC000169 * 
 * Transform:       Join                                                    * 
 * Description:     Modifica registros para 7D                              * 
 *                                                                          * 
 * Source Tables:   Append - work.APEND_HIST_MES          A5J3RISO.AI0001B9 * 
 *                  Join - work.TWSGRE_7C_7D              A5J3RISO.AI0001BH * 
 * Target Table:    Join - work.TWMOD_7D                  A5J3RISO.AI0001BI * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC000169);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.APEND_HIST_MES, DATA)) or 
         %sysfunc(exist(work.APEND_HIST_MES, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.APEND_HIST_MES out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete TWMOD_7D;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: CAG_CLIE, CEMPR";
run;

proc sql;
   create view work.TWMOD_7D as
   select
      W4A9QMW.DOCORR length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      W4A9QMW.RHIST length = 3410   
         format = $3410.
         informat = $3410.,
      W4A9QMW.DDESCB length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      W4A9QMW.CCTA_CLIE length = 8,
      W4A9QMW.CCORRL length = 8,
      W4A9QMW.CRZ_CTBIL length = 8,
      W4A9QMW.CCTA_CTBIL length = 8,
      COALESCE(W3U1EU.CTIPO_PERDA , W4A9QMW.CTIPO_PERDA) as CTIPO_PERDA length = 2,
      W4A9QMW.CJUNC_DSTNO length = 8,
      W4A9QMW.CDEPDC length = 8,
      W4A9QMW.VPERDA length = 8   
         format = 13.2
         informat = 13.2,
      W4A9QMW.VREEMB_BDN length = 8   
         format = 13.2
         informat = 13.2,
      W4A9QMW.VREEMB length = 8   
         format = 13.2
         informat = 13.2,
      W4A9QMW.VCPMF_TRANS length = 8   
         format = 13.2
         informat = 13.2,
      W4A9QMW.CPEDIDO length = 26,
      W4A9QMW.CTP_CTA_BDN length = 8,
      W4A9QMW.CTP_OCORR_BDN length = 8,
      . as CAG_CLIE length = 8,
      W4A9QMW.CMAQUINA length = 8,
      W4A9QMW.CLOC_EQUIP length = 8,
      W4A9QMW.CCPMF_BDN length = 8,
      W4A9QMW.DCTBIL length = 8   
         format = DDMMYY10.
         informat = DDMMYY8.,
      . as CEMPR length = 8   
         format = BEST9.
         label = 'COD_EMPR',
      W4A9QMW.CIDTFD_CNTRL length = 50,
      W4A9QMW.CGRP_ATGDO_PERDA length = 8   
         format = 1.
         informat = 1.,
      W4A9QMW.CSGRP_ATGDO_PERDA length = 8   
         format = $8.
         informat = $8.,
      W4A9QMW.CCAUSA_ATGDO_PERDA length = 8   
         format = $8.
         informat = $8.,
      W4A9QMW.CEVNTO_PERDA length = 10   
         format = $10.
         informat = $10.,
      W4A9QMW.CLIN_NEGOC length = 3,
      W4A9QMW.DREFERENCIA_LEGADO length = 8   
         format = 8.
         informat = 8.
         label = 'dtReferenciaLegado',
      W4A9QMW.IARQUIVO_LEGADO length = 255   
         format = $255.
         informat = $255.
         label = 'nmArquivoLegado',
      W4A9QMW.CEMPR_RAZAO length = 8   
         format = 8.
         informat = 8.
         label = 'cdEmpresaRazao'
   from
      work.APEND_HIST_MES as W4A9QMW left join 
      work.TWSGRE_7C_7D as W3U1EU
         on
         (
            W4A9QMW.CPEDIDO = W3U1EU.CPEDIDO
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Join **/

/*==========================================================================* 
 * Step:            Append                                A5J3RISO.AC00016A * 
 * Transform:       Append                                                  * 
 * Description:     Perda + Recup                                           * 
 *                                                                          * 
 * Source Tables:   Join - work.TWMOD_7D                  A5J3RISO.AI0001BI * 
 *                  Join - work.DV_SGRE_RECUP_CARIMB      A5J3RISO.AI0001BG * 
 * Target Table:    Append - work.TWSGRE_BASE_FINAL       A5J3RISO.AI0001BJ * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00016A);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let dbxrc = %eval(%sysfunc(exist(work.TWMOD_7D, DATA)) or 
      %sysfunc(exist(work.TWMOD_7D, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2S71XHX;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W2S71XHX as
      select
         DOCORR,
         RHIST,
         DDESCB,
         CCTA_CLIE,
         CCORRL,
         CRZ_CTBIL,
         CCTA_CTBIL,
         CTIPO_PERDA,
         CJUNC_DSTNO,
         CDEPDC,
         VPERDA,
         VREEMB_BDN,
         VREEMB,
         VCPMF_TRANS,
         CPEDIDO,
         CTP_CTA_BDN,
         CTP_OCORR_BDN,
         CAG_CLIE,
         CMAQUINA,
         CLOC_EQUIP,
         CCPMF_BDN,
         DCTBIL,
         CIDTFD_CNTRL   
            format = $50.
            informat = $50.,
         CGRP_ATGDO_PERDA,
         CSGRP_ATGDO_PERDA,
         CCAUSA_ATGDO_PERDA,
         CEVNTO_PERDA,
         CLIN_NEGOC,
         CEMPR_RAZAO,
         DREFERENCIA_LEGADO,
         IARQUIVO_LEGADO
   from work.TWMOD_7D
   ;
quit;

%let SYSLAST = work.W2S71XHX;

%let dbxrc = %eval(%sysfunc(exist(work.DV_SGRE_RECUP_CARIMB, DATA)) or 
      %sysfunc(exist(work.DV_SGRE_RECUP_CARIMB, VIEW))); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W2S71XI4;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W2S71XI4 as
      select
         DOCORR,
         RHIST   
            format = $3410.
            informat = $3410.,
         DDESCB,
         CCTA_CLIE,
         CCORRL,
         CRZ_CTBIL,
         CCTA_CTBIL,
         CTIPO_PERDA,
         CJUNC_DSTNO,
         CDEPDC,
         VRECUP_ESTORNO as VPERDA   
            format = 13.2
            informat = 13.2,
         VREEMB_BDN,
         VREEMB,
         CPEDIDO,
         CTP_CTA_BDN,
         CTP_OCORR_BDN,
         CAG_CLIE,
         CMAQUINA,
         CLOC_EQUIP,
         CCPMF_BDN,
         DCTBIL   
            informat = DDMMYY8.,
         CIDTFD_CNTRL,
         CGRP_ATGDO_PERDA,
         CSGRP_ATGDO_PERDA length = 8   
            format = $8.
            informat = $8.,
         CCAUSA_ATGDO_PERDA length = 8   
            format = $8.
            informat = $8.,
         CEVNTO_PERDA length = 10   
            format = $10.
            informat = $10.,
         CLIN_NEGOC,
         CEMPR_RAZAO,
         DREFERENCIA_LEGADO,
         IARQUIVO_LEGADO
   from work.DV_SGRE_RECUP_CARIMB
   ;
quit;

%let SYSLAST = work.W2S71XI4;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete TWSGRE_BASE_FINAL;
quit;

data work.TWSGRE_BASE_FINAL / view=work.TWSGRE_BASE_FINAL;
   set work.W2S71XHX
       work.W2S71XI4;
   keep DOCORR RHIST DDESCB CCTA_CLIE CCORRL CRZ_CTBIL CCTA_CTBIL CTIPO_PERDA 
    CJUNC_DSTNO CDEPDC VPERDA VREEMB_BDN VREEMB VCPMF_TRANS CPEDIDO CTP_CTA_BDN 
    CTP_OCORR_BDN CAG_CLIE CMAQUINA CLOC_EQUIP CCPMF_BDN DCTBIL CIDTFD_CNTRL 
    CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CEVNTO_PERDA CLIN_NEGOC 
    CEMPR_RAZAO DREFERENCIA_LEGADO IARQUIVO_LEGADO; 
run;

%rcSet(&syserr); 



/**  Step end Append **/

/*==========================================================================* 
 * Step:            Data Validation                       A5J3RISO.AC00016B * 
 * Transform:       Data Validation                                         * 
 * Description:     Registra falta de carimbos SGRE                         * 
 *                                                                          * 
 * Source Table:    Append - work.TWSGRE_BASE_FINAL       A5J3RISO.AI0001BJ * 
 * Target Tables:   Valid records table -                 A5J3RISO.AI0001BK * 
 *                   work.DV_SGRE_CAR                                       * 
 *                  Error records table -                 A5J3RISO.AI0001BL * 
 *                   work.DV_SGRE_CAR_ERROR                                 * 
 *                  DV_SGRE_CAR_EXCE -                    A5J3RISO.AI0001BM * 
 *                   work.DV_SGRE_CAR_EXCE                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00016B);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.TWSGRE_BASE_FINAL); 

proc datasets library=work nolist nowarn memtype=(data view);
 delete etls_Errors etls_Exceptions etls_target;
quit;

%macro etls_Validate; 

   /* Create SAS work table from source table  */ 
   proc sql;
   create table etls_Source as
    select *
    from work.TWSGRE_BASE_FINAL
   ;
   quit;
   
   %let runTime = %sysfunc(datetime()); 
   
   /* Create the Exception Report  */ 
   %macro makeReport; 
   
      %if (&m_excp eq 1) %then 
      %do; 
         options nodate; 
         
         proc sort data = etls_Exceptions; 
            by x_row; 
         run; 
         
         proc print data = etls_Exceptions noobs label; 
            title1 "Exceptions Found in Table: work.TWSGRE_BASE_FINAL"; 
            title2 "%sysfunc(datetime(),nldatmap.)"; 
         run; 
         
         options date; 
         
      %end; 
      
   %mend makeReport; 
   
   /* Delete error tables prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE_CAR_ERROR;
   quit;
   
   /* Delete exception table prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE_CAR_EXCE;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE_CAR;
   quit;
   
   %let m_excp = 0;
   %let cust_exp=0; 
   
   /*---- Begin checks for Custom, Missing Values, and Invalid Values  ----*/ 
   
   data etls_target
      (keep = CPEDIDO CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CEVNTO_PERDA 
      CLIN_NEGOC DOCORR RHIST DDESCB CCTA_CLIE CCORRL CRZ_CTBIL CCTA_CTBIL 
      CTIPO_PERDA CJUNC_DSTNO CDEPDC VPERDA VREEMB_BDN VREEMB VCPMF_TRANS 
      CTP_CTA_BDN CTP_OCORR_BDN CAG_CLIE CMAQUINA CLOC_EQUIP CCPMF_BDN DCTBIL 
      CIDTFD_CNTRL CEMPR_RAZAO DREFERENCIA_LEGADO IARQUIVO_LEGADO)
     etls_Errors
      (keep = DOCORR DDESCB CCTA_CLIE CCORRL CRZ_CTBIL CCTA_CTBIL CTIPO_PERDA CJUNC_DSTNO 
      CDEPDC VPERDA VREEMB_BDN VREEMB VCPMF_TRANS CPEDIDO CTP_CTA_BDN CTP_OCORR_BDN 
      CAG_CLIE CMAQUINA CLOC_EQUIP CCPMF_BDN DCTBIL CGRP_ATGDO_PERDA CLIN_NEGOC 
      CIDTFD_CNTRL CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CEVNTO_PERDA CEMPR_RAZAO 
      DREFERENCIA_LEGADO)
     etls_Exceptions
      (keep = x_row x_type x_column x_note x_custom_name x_custom_value x_custom_rule 
      x_action x_datetime CTIPO_PERDA DOCORR DDESCB CCTA_CLIE CCORRL CRZ_CTBIL 
      CCTA_CTBIL CJUNC_DSTNO CDEPDC VPERDA VREEMB_BDN VREEMB VCPMF_TRANS CPEDIDO 
      CTP_CTA_BDN CTP_OCORR_BDN CAG_CLIE CMAQUINA CLOC_EQUIP CCPMF_BDN DCTBIL 
      CIDTFD_CNTRL CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA 
      CEVNTO_PERDA CLIN_NEGOC CEMPR_RAZAO DREFERENCIA_LEGADO);
   
      set etls_Source end=eof;
      
      attrib x_row length = 8
         format = BEST32.
         informat = BEST32.
         label = 'Row Number'; 
      attrib x_type length = $100
         label = 'Exception Type'; 
      attrib x_column length = $100
         label = 'Column Name'; 
      attrib x_note length = $200
         label = 'Column Value'; 
      attrib x_custom_name length = $100
         label = 'Custom Name'; 
      attrib x_custom_value length = $200
         label = 'Custom Value'; 
      attrib x_custom_rule length = $250
         label = 'Custom Rule'; 
      attrib x_action length = $50
         label = 'Action Taken'; 
      attrib x_datetime length = 8
         format = nldatm.
         informat = nldatm.
         label = 'Run Time'; 
      
      i_move=0;
      retain i_excp error_rows excp_rows valid_rows cust_excp 0;
      
      x_datetime = "&etls_stepStartTime"dt;
      ETL_Error_JobRunTime = x_datetime;
      
      x_row = _n_;
      
      /*---- Check for Missing value for CLIN_NEGOC  ----*/ 
      
      if (CLIN_NEGOC eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CLIN_NEGOC";
         x_note = CLIN_NEGOC;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CLIN_NEGOC is missing  */ 
      
      /*---- Check for Missing value for CCAUSA_ATGDO_PERDA  ----*/ 
      
      if (CCAUSA_ATGDO_PERDA eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CCAUSA_ATGDO_PERDA";
         x_note = CCAUSA_ATGDO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CCAUSA_ATGDO_PERDA is missing  */ 
      
      /*---- Check for Missing value for CGRP_ATGDO_PERDA  ----*/ 
      
      if (CGRP_ATGDO_PERDA eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CGRP_ATGDO_PERDA";
         x_note = CGRP_ATGDO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CGRP_ATGDO_PERDA is missing  */ 
      
      /*---- Check for Missing value for CSGRP_ATGDO_PERDA  ----*/ 
      
      if (CSGRP_ATGDO_PERDA eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CSGRP_ATGDO_PERDA";
         x_note = CSGRP_ATGDO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CSGRP_ATGDO_PERDA is missing  */ 
      
      /*---- Check for Missing value for CEVNTO_PERDA  ----*/ 
      
      if (CEVNTO_PERDA eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CEVNTO_PERDA";
         x_note = CEVNTO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CEVNTO_PERDA is missing  */ 
      
      
      if i_move = 0 then
      do;
        valid_rows+1;
        output etls_target;
      
      end;
      else
      if i_move = 1 then
      do;
        error_rows+1;
        output etls_Errors;
      
      end;
      if eof then 
      do; 
         /* create macro flags  */ 
         
         call symputx("m_excp", put(i_excp, 1.));
         call symputx("cust_excp", put(cust_excp,1.));
         /* total source rows processed  */ 
         call symputx("total_source_rows",trim(left(put(_N_,9.))));
         /* total rows passed validation  */ 
         call symputx("total_valid_rows",valid_rows);
         /* total error rows processed  */ 
         call symputx("total_error_rows",error_rows);
         /* total number of exceptions  */ 
         call symputx("total_excp_rows",excp_rows);
         
      end;
      
      run;
      
      data _null_;
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - SOURCE = %trim(&total_source_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - VALID RECORDS = %trim(&total_valid_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - ERROR = %trim(&total_error_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - EXCEPTION = %trim(&total_excp_rows)";
      run;
      
      /* Update/Append to permanent table - delete work table  */ 
      proc append base=work.DV_SGRE_CAR data=etls_target force;
      run;
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_target;
      quit;
      
      %let work_error_exist = %eval(%sysfunc(exist(etls_Errors, DATA)) or 
            %sysfunc(exist(etls_Errors, VIEW))); 
      
      %if &work_error_exist > 0 %then
      %do;
        proc append base=work.DV_SGRE_CAR_ERROR data=etls_Errors force;
        run;
      
         proc datasets library=work memtype=(data view) nolist nowarn;
           delete etls_Errors;
         quit;
         
      %end;
      
      proc append base=work.DV_SGRE_CAR_EXCE data=etls_Exceptions(SORTEDBY=_NULL_) force;
      run;
      
      
      %makeReport; 
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_Exceptions;
      quit;
      
      
      
      %goto STEP_CONTINUE;
      
      %STEP_ERR:
      
         %let sysrc = 9999; 
         %rcSet(&sysrc); 
         
      %STEP_CONTINUE:
      
      %mend etls_Validate;
      %etls_Validate;
      
      /*---- Start of Post-Process Code  ----*/ 
            
            %macro verificaErros;
             
            	/*Verifica se a tabela de erros foi criada*/
            	%contaRegistros(_dataSet=WORK.DV_SGRE_CAR_EXCE);
             
            	/*Verifica se existe erros na tabela de erros*/
            	%if &numObs > 0 %then %do;
            
            		/*Grava os erros na tabela de Erros*/
            		%gerarTabelaErro(_dataSetHist=EGRC_ERR.TERRO_SGRE, _dataSet=WORK.DV_SGRE_CAR_EXCE, _tamanhoHist=12, _dataHist=DCTBIL);
            		/*Move arquivos de origem para a pasta REJEITADOS*/
            		%moveArquivo(dirorig="4859-SGRE",arqorig="SGREROCI.TXT",dir="PROCESSADOS");
            		%moveArquivo(dirorig="4859-SGRE",arqorig="SGRERECUP.txt",dir="PROCESSADOS");
            		/*Cria o resumo do erro*/
            		%geraResumo_erro(_dataSet=WORK.DV_SGRE_CAR_EXCE, _errDataSet=TERRO_SGRE);
            		/*Envia o resumo para o email*/
            		%emailErro();
            		/*Finaliza processo carregando informações na tabela de controle*/
            		%let job_rc = 8000;
            		%Fim_Processo;
            	%end;
            	/*Aborta o Job caso exista erros*/
            	%abortaExecucao(_status=&numObs);
             
            %mend verificaErros;
            
            %verificaErros;
            /*---- End of Post-Process Code  ----*/ 
            
            %rcSet(&syserr); 
            %rcSet(&sqlrc); 
            
            
            
            /**  Step end Data Validation **/
            
            /*==========================================================================* 
 * Step:            Extract                               A5J3RISO.AC00016C * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Valid records table -                 A5J3RISO.AI0001BK * 
 *                   work.DV_SGRE_CAR                                       * 
 * Target Table:    Extract - work.WI8EK0N                A5J3RISO.AI0001BN * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00016C);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.DV_SGRE_CAR, DATA)) or 
         %sysfunc(exist(work.DV_SGRE_CAR, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.DV_SGRE_CAR out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.DV_SGRE_CAR); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete WI8EK0N;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.WI8EK0N as
      select distinct
         DREFERENCIA_LEGADO,
         (COUNT(DISTINCT DREFERENCIA_LEGADO)) as Contagem_Data length = 8
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.WI8EK0N;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Data Validation                       A5J3RISO.AC00016D * 
 * Transform:       Data Validation                                         * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Extract - work.WI8EK0N                A5J3RISO.AI0001BN * 
 * Target Tables:   Valid records table - work.WI8DMWZ    A5J3RISO.AI0001BO * 
 *                  Error records table - work.W6MGSJEV   A5J3RISO.AI0001BP * 
 *                  DV_SGRE_CAR_EXCE_DCTBIL -             A5J3RISO.AI0001BQ * 
 *                   work.DV_SGRE_CAR_EXCE_DCTBIL                           * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00016D);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.WI8EK0N); 

proc datasets library=work nolist nowarn memtype=(data view);
 delete etls_Errors etls_Exceptions etls_target;
quit;

%macro etls_Validate; 

   /* Create SAS work table from source table  */ 
   proc sql;
   create table etls_Source as
    select *
    from work.WI8EK0N
   ;
   quit;
   
   %let runTime = %sysfunc(datetime()); 
   
   /* Create the Exception Report  */ 
   %macro makeReport; 
   
      %if (&m_excp eq 1) %then 
      %do; 
         options nodate; 
         
         proc sort data = etls_Exceptions; 
            by x_row; 
         run; 
         
         proc print data = etls_Exceptions noobs label; 
            title1 "Exceptions Found in Table: work.WI8EK0N"; 
            title2 "%sysfunc(datetime(),nldatmap.)"; 
         run; 
         
         options date; 
         
      %end; 
      
   %mend makeReport; 
   
   /* Delete error tables prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W6MGSJEV;
   quit;
   
   /* Delete exception table prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_SGRE_CAR_EXCE_DCTBIL;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete WI8DMWZ;
   quit;
   
   %let m_excp = 0;
   %let cust_exp=0; 
   
   /*---- Begin checks for Custom, Missing Values, and Invalid Values  ----*/ 
   
   data etls_target
      (keep = DREFERENCIA_LEGADO Contagem_Data)
     etls_Errors
      (keep = DREFERENCIA_LEGADO)
     etls_Exceptions
      (keep = x_row x_type x_column x_note x_custom_name x_custom_value x_custom_rule 
      x_action x_datetime DREFERENCIA_LEGADO);
   
      set etls_Source end=eof;
      
      attrib x_row length = 8
         format = BEST32.
         informat = BEST32.
         label = 'Row Number'; 
      attrib x_type length = $100
         label = 'Exception Type'; 
      attrib x_column length = $100
         label = 'Column Name'; 
      attrib x_note length = $200
         label = 'Column Value'; 
      attrib x_custom_name length = $100
         label = 'Custom Name'; 
      attrib x_custom_value length = $200
         label = 'Custom Value'; 
      attrib x_custom_rule length = $250
         label = 'Custom Rule'; 
      attrib x_action length = $50
         label = 'Action Taken'; 
      attrib x_datetime length = 8
         format = nldatm.
         informat = nldatm.
         label = 'Run Time'; 
      
      i_move=0;
      retain i_excp error_rows excp_rows valid_rows cust_excp 0;
      
      x_datetime = "&etls_stepStartTime"dt;
      ETL_Error_JobRunTime = x_datetime;
      
      x_row = _n_;
      
      /*---- Custom Validation: Mais de uma data base na origem  ----*/ 
      if (Contagem_Data > 1) then 
      do; 
      end;  /* if (Contagem_Data > 1) */
      else 
      do; 
      end;  /* else */
      
      if error_rows=0 then
      do;
       valid_rows+1;
       output etls_target;
      end;
      
      if eof then 
      do; 
         /* create macro flags  */ 
         
         call symputx("m_excp", put(i_excp, 1.));
         call symputx("cust_excp", put(cust_excp,1.));
         /* total source rows processed  */ 
         call symputx("total_source_rows",trim(left(put(_N_,9.))));
         /* total rows passed validation  */ 
         call symputx("total_valid_rows",valid_rows);
         /* total error rows processed  */ 
         call symputx("total_error_rows",error_rows);
         /* total number of exceptions  */ 
         call symputx("total_excp_rows",excp_rows);
         
      end;
      
      run;
      
      data _null_;
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - SOURCE = %trim(&total_source_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - VALID RECORDS = %trim(&total_valid_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - ERROR = %trim(&total_error_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - EXCEPTION = %trim(&total_excp_rows)";
      run;
      
      /* Update/Append to permanent table - delete work table  */ 
      proc append base=work.WI8DMWZ data=etls_target force;
      run;
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_target;
      quit;
      
      %let work_error_exist = %eval(%sysfunc(exist(etls_Errors, DATA)) or 
            %sysfunc(exist(etls_Errors, VIEW))); 
      
      %if &work_error_exist > 0 %then
      %do;
        proc append base=work.W6MGSJEV data=etls_Errors force;
        run;
      
         proc datasets library=work memtype=(data view) nolist nowarn;
           delete etls_Errors;
         quit;
         
      %end;
      
      proc append base=work.DV_SGRE_CAR_EXCE_DCTBIL data=etls_Exceptions(SORTEDBY=_NULL_) force;
      run;
      
      
      %makeReport; 
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_Exceptions;
      quit;
      
      
      
      %goto STEP_CONTINUE;
      
      %STEP_ERR:
      
         %let sysrc = 9999; 
         %rcSet(&sysrc); 
         
      %STEP_CONTINUE:
      
      %mend etls_Validate;
      %etls_Validate;
      
      /*---- Start of Post-Process Code  ----*/ 
            
            %macro verificaErros;
             
            	/*Verifica se a tabela de erros foi criada*/
            	%contaRegistros(_dataSet=WORK.DV_SGRE_CAR_EXCE_DCTBIL);
             
            	/*Verifica se existe erros na tabela de erros*/
            	%if &numObs > 0 %then %do;
            
            		/*Grava os erros na tabela de Erros*/
            		%gerarTabelaErro(_dataSetHist=EGRC_ERR.TERRO_SGRE, _dataSet=WORK.DV_SGRE_CAR_EXCE_DCTBIL, _tamanhoHist=12, _dataHist=DREFERENCIA_LEGADO);
            		/*Move arquivos de origem para a pasta REJEITADOS*/
            		%moveArquivo(dirorig="4859-SGRE",arqorig="SGREROCI.TXT",dir="PROCESSADOS");
            		%moveArquivo(dirorig="4859-SGRE",arqorig="SGRERECUP.txt",dir="PROCESSADOS");
            		/*Cria o resumo do erro*/
            		%geraResumo_erro(_dataSet=WORK.DV_SGRE_CAR_EXCE_DCTBIL, _errDataSet=TERRO_SGRE);
            		/*Envia o resumo para o email*/
            		%emailErro();
            		/*Finaliza processo carregando informações na tabela de controle*/
            		%let job_rc = 8000;
            		%Fim_Processo;
            	%end;
            	/*Aborta o Job caso exista erros*/
            	%abortaExecucao(_status=&numObs);
             
            %mend verificaErros;
            
            %verificaErros;
            /*---- End of Post-Process Code  ----*/ 
            
            %rcSet(&syserr); 
            %rcSet(&sqlrc); 
            
            
            
            /**  Step end Data Validation **/
            
            /*==========================================================================* 
 * Step:            Table Loader                          A5J3RISO.AC00016E * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Valid records table -                 A5J3RISO.AI0001BK * 
 *                   work.DV_SGRE_CAR                                       * 
 * Target Table:    TSGRE - RO_PRE.TSGRE                  A5J3RISO.AQ00007R * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00016E);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(work.DV_SGRE_CAR); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W2S71XKY;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.W2S71XKY as
         select
            DOCORR   
               informat = DDMMYY10.,
            RHIST,
            DDESCB   
               informat = DDMMYY10.,
            CCTA_CLIE   
               format = 13.
               informat = 13.,
            CCORRL   
               format = 4.
               informat = 4.,
            (TRIM(LEFT(PUT(CRZ_CTBIL,BEST32.)))) as CRZ_CTBIL length = 5
               format = $5.
               informat = $5.,
            (TRIM(LEFT(PUT(CCTA_CTBIL,BEST32.)))) as CCTA_CTBIL length = 13
               format = $13.
               informat = $13.,
            CTIPO_PERDA   
               format = $2.
               informat = $2.,
            CJUNC_DSTNO   
               format = 5.
               informat = 5.,
            CDEPDC   
               format = 5.
               informat = 5.,
            VPERDA,
            VREEMB_BDN,
            VREEMB,
            VCPMF_TRANS,
            CPEDIDO   
               format = $26.
               informat = $26.,
            CTP_CTA_BDN as CTIPO_CTA_BDN   
               format = 2.
               informat = 2.,
            CTP_OCORR_BDN as CTIPO_OCORR_BDN   
               format = 3.
               informat = 3.,
            CAG_CLIE   
               format = 5.
               informat = 5.,
            CMAQUINA   
               format = 7.
               informat = 7.,
            CLOC_EQUIP   
               format = 1.
               informat = 1.,
            CCPMF_BDN   
               format = 1.
               informat = 1.,
            DCTBIL   
               informat = DDMMYY10.,
            CIDTFD_CNTRL,
            CGRP_ATGDO_PERDA   
               format = BEST16.,
            CLIN_NEGOC   
               format = $3.
               informat = $3.,
            CSGRP_ATGDO_PERDA,
            CCAUSA_ATGDO_PERDA,
            CEVNTO_PERDA,
            CEMPR_RAZAO,
            DREFERENCIA_LEGADO,
            IARQUIVO_LEGADO
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.W2S71XKY;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(RO_PRE.TSGRE, DATA)) or 
         %sysfunc(exist(RO_PRE.TSGRE, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=RO_PRE.TSGRE, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = RO_PRE nolist nowarn memtype = (data view);
         delete TSGRE;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data RO_PRE.TSGRE;
         attrib DOCORR length = 8
            format = DDMMYY10.
            informat = DDMMYY10.; 
         attrib RHIST length = $3410
            format = $3410.
            informat = $3410.; 
         attrib DDESCB length = 8
            format = DDMMYY10.
            informat = DDMMYY10.; 
         attrib CCTA_CLIE length = 8
            format = 13.
            informat = 13.; 
         attrib CCORRL length = 8
            format = 4.
            informat = 4.; 
         attrib CRZ_CTBIL length = $5
            format = $5.
            informat = $5.; 
         attrib CCTA_CTBIL length = $13
            format = $13.
            informat = $13.; 
         attrib CTIPO_PERDA length = $2
            format = $2.
            informat = $2.; 
         attrib CJUNC_DSTNO length = 8
            format = 5.
            informat = 5.; 
         attrib CDEPDC length = 8
            format = 5.
            informat = 5.; 
         attrib VPERDA length = 8
            format = 13.2
            informat = 13.2; 
         attrib VREEMB_BDN length = 8
            format = 13.2
            informat = 13.2; 
         attrib VREEMB length = 8
            format = 13.2
            informat = 13.2; 
         attrib VCPMF_TRANS length = 8
            format = 13.2
            informat = 13.2; 
         attrib CPEDIDO length = $26
            format = $26.
            informat = $26.; 
         attrib CTIPO_CTA_BDN length = 8
            format = 2.
            informat = 2.; 
         attrib CTIPO_OCORR_BDN length = 8
            format = 3.
            informat = 3.; 
         attrib CAG_CLIE length = 8
            format = 5.
            informat = 5.; 
         attrib CMAQUINA length = 8
            format = 7.
            informat = 7.; 
         attrib CLOC_EQUIP length = 8
            format = 1.
            informat = 1.; 
         attrib CCPMF_BDN length = 8
            format = 1.
            informat = 1.; 
         attrib DCTBIL length = 8
            format = DDMMYY10.
            informat = DDMMYY10.; 
         attrib CIDTFD_CNTRL length = $50
            format = $50.
            informat = $50.; 
         attrib CGRP_ATGDO_PERDA length = 8
            format = BEST16.
            label = 'GRP_ATPERDA'; 
         attrib CLIN_NEGOC length = $3
            format = $3.
            informat = $3.; 
         attrib CSGRP_ATGDO_PERDA length = $8
            format = $8.
            informat = $8.; 
         attrib CCAUSA_ATGDO_PERDA length = $8
            format = $8.
            informat = $8.; 
         attrib CEVNTO_PERDA length = $10
            format = $10.
            informat = $10.; 
         attrib CEMPR_RAZAO length = 8
            format = 8.
            informat = 8.
            label = 'cdEmpresaRazao'; 
         attrib DREFERENCIA_LEGADO length = 8
            format = 8.
            informat = 8.
            label = 'dtReferenciaLegado'; 
         attrib IARQUIVO_LEGADO length = $255
            format = $255.
            informat = $255.
            label = 'nmArquivoLegado'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = RO_PRE.TSGRE 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W2S71XKY;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_PRE.TSGRE, DATA)) or 
         %sysfunc(exist(RO_PRE.TSGRE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_PRE.TSGRE out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            CTR_REPROCESSAMENTO                   A5J3RISO.AC00016F * 
 * Transform:       CTR_REPROCESSAMENTO                                     * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    TSGRE - RO_PRE.TSGRE                  A5J3RISO.AQ00007R * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00016F);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_PRE.TSGRE, DATA)) or 
         %sysfunc(exist(RO_PRE.TSGRE, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_PRE.TSGRE out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(RO_PRE.TSGRE); 

%let _INPUT_count = 1; 
%let _INPUT = RO_PRE.TSGRE;
%let _INPUT_connect = ;
%let _INPUT_engine = BASE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Risco Operacional/EGRC/Produtivo/01_Pre_carga/02_Tabelas_Destino/TSGRE%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT0 = RO_PRE.TSGRE;
%let _INPUT0_connect = ;
%let _INPUT0_engine = BASE;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/Risco Operacional/EGRC/Produtivo/01_Pre_carga/02_Tabelas_Destino/TSGRE%(Table%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote();

%let _OUTPUT_count = 0; 

%let NomeArquivo = %nrquote(SGREROCI);


%macro CtrReprocessamento;

	/*
	Verificar se existe um reprocessamento pendente
	*/
	%let referencia=;

	/*
	Verificar se a tabela de controle existe
	*/
	%let etls_recCheckExist1 = %eval(%sysfunc(exist(RO_PARAM.TCTR_REPROC, DATA)) or 
        %sysfunc(exist(RO_PARAM.TCTR_REPROC, VIEW))); 

	%if (&etls_recCheckExist1) %then
		%do;
			
			/*
			Verifica se existe um reprocessamento pendente
			*/
			proc sql noprint;
				select DREFERENCIA_LEGADO
				into :referencia
				from RO_PARAM.TCTR_REPROC
				where IARQUIVO_LEGADO = "&nomeArquivo."
				and 	DREFERENCIA_LEGADO = &_DAT_REFERENCIA.
				and 	CPROCESSADO = "N";
			quit;
			
			%let referencia = &referencia.;		
			
			%if &referencia. ne  %then
			%do;
				/*
				Exclui todas as informações do arquivo e referencia em questão do repositorio
				*/
				proc sql noprint;
					Delete * from RO_REP.TREP_PERDAS_OP
					where IARQUIVO_LEGADO = "&nomeArquivo."
					and	DREFERENCIA_LEGADO = &referencia.;
				quit;	
			
				/*
				Atualiza o controle de reprocessamento
				*/

				proc sql noprint;
					Update RO_PARAM.TCTR_REPROC
					Set CPROCESSADO = "S",
						 DTH_EXECUCAO = %sysfunc(datetime())
					where IARQUIVO_LEGADO = "&nomeArquivo."
					and	DREFERENCIA_LEGADO = &referencia.;
				quit;	
							
			%end;
	
	%end;

%mend CtrReprocessamento;



%CtrReprocessamento;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end CTR_REPROCESSAMENTO **/

/*==========================================================================* 
 * Step:            Table Loader                          A5J3RISO.AC00016G * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    TSGRE - RO_PRE.TSGRE                  A5J3RISO.AQ00007R * 
 * Target Table:    TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00016G);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let SYSLAST = %nrquote(RO_PRE.TSGRE); 

%let ETLS_SYSLAST = &SYSLAST;
/*---- Start of Pre-Process Code  ----*/ 

proc sql;

	delete * from ro_rep.trep_perdas_op where IARQUIVO_LEGADO = "&arquivo.";

quit;
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

%let SYSLAST = &ETLS_SYSLAST;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W2S71XS3;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: CAJUST, CAREA, CBANDE, CBIN_CATAO,"
           " CCATEG_ESTAB, CCORRL2, CCPF_CNPJ, CCULPA,    CEMPR, CESTAB_TRANS,"
           " CGCPJ, CLANC, CMOTVO_CANC, CMOVIM, COD_LACTO, COSIF,    CPRODU,"
           " CPROM, CRAIZ, CRECLA, CREGIS_CORRT, CSBTPO_ACAO, CSECAO,   "
           " CSEGUN_RECLA, CSEQ_REGIS, CSTUS, CTIPO_ACAO, CTIPO_CARTAO,"
           " CTIPO_EQUIP,    CTIPO_FRAUD, CTIPO_MOVIM, CTIPO_REGIS, CTRANS,"
           " DBAIXA, DCAD, DCONTR, DTRANS,    IBANDE, ICIDAD_CLINT,"
           " ICIDAD_ESTAB, ICOMAR, IDESP, IENVDO, IESTAD_CLINT,    IESTAD_ESTAB,"
           " IMUN, IPAIS_TRANS, IPLANO_SEG, ISBTPO_ACAO, IUF, NBANDE, NBDN,   "
           " NCATAO, NCOTACAO, NOPER, NPROCS, NREF, RDEPDC, REMPR, REVENTO,"
           " RMOTVO_BAIXA,    RMOTVO_CANC, RPRODU, RRECLA, RSBTPO_ACAO,"
           " RSEGUN_RECLA, RSGMTO_DBDN,    RSTATUS, RTIPO_ACAO, RTIPO_FRAUD,"
           " RTIPO_TRANS, VBAIXA, VBANCO_COMPR,    VDESP_ACESS, VDESP_BDSCO,"
           " VDESP_VDDOR, VORI, VPERDA_RCUPC, VRECUP_ESTORNO,    VTRANS,"
           " CCLASF_ENVDO";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.W2S71XS3 as
         select
            "" as CAJUST length = 20
               format = $20.,
            "" as CAREA length = 8
               format = $8.,
            "" as CBANDE length = 5
               format = $5.,
            "" as CBIN_CATAO length = 8
               format = $8.,
            . as CCATEG_ESTAB length = 4
               format = 4.,
            CCAUSA_ATGDO_PERDA,
            CCORRL   
               format = 8.,
            . as CCORRL2 length = 8
               format = 8.,
            "" as CCPF_CNPJ length = 20
               format = $20.,
            CCPMF_BDN   
               format = 8.,
            CCTA_CLIE   
               format = 8.,
            CCTA_CTBIL,
            . as CCULPA length = 3
               format = 3.,
            CDEPDC   
               format = 8.,
            . as CEMPR length = 8
               format = 8.,
            CEMPR_RAZAO,
            "" as CESTAB_TRANS length = 30
               format = $30.,
            CEVNTO_PERDA,
            . as CGCPJ length = 8,
            CIDTFD_CNTRL,
            CGRP_ATGDO_PERDA   
               format = 8.,
            CJUNC_DSTNO   
               format = 8.,
            . as CLANC length = 8
               format = 8.,
            CLIN_NEGOC,
            CLOC_EQUIP   
               format = 8.,
            CMAQUINA   
               format = 8.,
            "" as CMOTVO_CANC length = 3
               format = $3.,
            . as CMOVIM length = 4
               format = 4.,
            . as COD_LACTO length = 5
               format = 5.,
            . as COSIF length = 8
               format = 8.,
            CPEDIDO,
            "" as CPRODU length = 8
               format = $8.,
            . as CPROM length = 8
               format = 8.,
            "" as CRAIZ length = 8
               format = $8.,
            . as CRECLA length = 8
               format = 8.,
            "" as CREGIS_CORRT length = 21
               format = $21.,
            CRZ_CTBIL length = 13   
               format = $13.,
            . as CSBTPO_ACAO length = 3
               format = 3.,
            . as CSECAO length = 8
               format = 8.,
            . as CSEGUN_RECLA length = 8
               format = 8.,
            "" as CSEQ_REGIS length = 8
               format = $8.,
            CSGRP_ATGDO_PERDA,
            "" as CSTUS length = 2
               format = $2.,
            . as CTIPO_ACAO length = 4
               format = 4.,
            "" as CTIPO_CARTAO length = 5
               format = $5.,
            CTIPO_CTA_BDN   
               format = 8.,
            . as CTIPO_EQUIP length = 5
               format = 5.,
            . as CTIPO_FRAUD length = 3
               format = 3.,
            "" as CTIPO_MOVIM length = 1
               format = $1.,
            CTIPO_OCORR_BDN   
               format = 8.,
            CTIPO_PERDA,
            "" as CTIPO_REGIS length = 1
               format = $1.,
            . as CTRANS length = 8
               format = 8.,
            . as DBAIXA length = 8
               format = DDMMYY10.,
            . as DCAD length = 8
               format = DDMMYY10.,
            . as DCONTR length = 8
               format = DDMMYY10.,
            DCTBIL,
            DDESCB,
            DOCORR,
            DREFERENCIA_LEGADO,
            . as DTRANS length = 8
               format = DDMMYY10.,
            IARQUIVO_LEGADO,
            "" as IBANDE length = 50
               format = $50.,
            "" as ICIDAD_CLINT length = 30
               format = $30.,
            "" as ICIDAD_ESTAB length = 12
               format = $12.,
            "" as ICOMAR length = 40
               format = $40.,
            "" as IDESP length = 25
               format = $25.,
            "" as IENVDO length = 50
               format = $50.,
            "" as IESTAD_CLINT length = 2
               format = $2.,
            "" as IESTAD_ESTAB length = 2
               format = $2.,
            "" as IMUN length = 20
               format = $20.,
            "" as IPAIS_TRANS length = 2
               format = $2.,
            "" as IPLANO_SEG length = 42
               format = $42.,
            "" as ISBTPO_ACAO length = 256
               format = $256.,
            "" as IUF length = 2
               format = $2.,
            . as NBANDE length = 5
               format = 5.,
            "" as NBDN length = 18
               format = $18.,
            "" as NCATAO length = 16
               format = $16.,
            . as NCOTACAO length = 8
               format = 8.,
            "" as NOPER length = 20
               format = $20.,
            "" as NPROCS length = 30
               format = $30.,
            "" as NREF length = 23
               format = $23.,
            "" as RDEPDC length = 50
               format = $50.,
            "" as REMPR length = 50
               format = $50.,
            "" as REVENTO length = 20
               format = $20.,
            RHIST,
            "" as RMOTVO_BAIXA length = 50
               format = $50.
               informat = $50.,
            "" as RMOTVO_CANC length = 8
               format = $8.,
            "" as RPRODU length = 40
               format = $40.,
            "" as RRECLA length = 50
               format = $50.,
            "" as RSBTPO_ACAO length = 256
               format = $256.,
            "" as RSEGUN_RECLA length = 50
               format = $50.,
            "" as RSGMTO_DBDN length = 18
               format = $18.,
            "" as RSTATUS length = 20
               format = $20.,
            "" as RTIPO_ACAO length = 256
               format = $256.,
            "" as RTIPO_FRAUD length = 20
               format = $20.,
            "" as RTIPO_TRANS length = 1
               format = $1.,
            . as VBAIXA length = 8
               format = COMMAX12.2,
            . as VBANCO_COMPR length = 8
               format = COMMAX12.2,
            VCPMF_TRANS   
               format = COMMAX12.2,
            . as VDESP_ACESS length = 8
               format = COMMAX12.2,
            . as VDESP_BDSCO length = 8
               format = COMMAX12.2,
            . as VDESP_VDDOR length = 8
               format = COMMAX12.2,
            . as VORI length = 8
               format = COMMAX12.2,
            VPERDA   
               format = COMMAX12.2,
            . as VPERDA_RCUPC length = 8
               format = COMMAX12.2,
            . as VRECUP_ESTORNO length = 8
               format = COMMAX12.2,
            VREEMB   
               format = COMMAX12.2,
            VREEMB_BDN   
               format = COMMAX12.2,
            . as VTRANS length = 8
               format = COMMAX12.2,
            . as CCLASF_ENVDO length = 8,
            CAG_CLIE
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.W2S71XS3;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(RO_REP.TREP_PERDAS_OP, DATA)) or 
         %sysfunc(exist(RO_REP.TREP_PERDAS_OP, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data RO_REP.TREP_PERDAS_OP
              (label = 'Repositorio de perdas operacionais');
         attrib CAJUST length = $20
            format = $20.
            label = 'Codigo Ajuste'; 
         attrib CAREA length = $8
            format = $8.
            label = 'Codigo Area'; 
         attrib CBANDE length = $5
            format = $5.
            label = 'Codigo Bandeira'; 
         attrib CBIN_CATAO length = $8
            format = $8.
            label = 'Codigo Bin Cartao'; 
         attrib CCATEG_ESTAB length = 4
            format = 4.
            label = 'Codigo Categoria Estabelecimento'; 
         attrib CCAUSA_ATGDO_PERDA length = $8
            format = $8.
            label = 'Codigo Causa Atingidos Perda'; 
         attrib CCORRL length = 8
            format = 8.
            label = 'Codigo Correlata'; 
         attrib CCORRL2 length = 8
            format = 8.
            label = 'Codigo Correlata 2'; 
         attrib CCPF_CNPJ length = $20
            format = $20.
            label = 'Codigo CPF/CNPJ'; 
         attrib CCPMF_BDN length = 8
            format = 8.
            label = 'Codigo CPMF_BDN'; 
         attrib CCTA_CLIE length = 8
            format = 8.
            label = 'Codigo Conta Cliente'; 
         attrib CCTA_CTBIL length = $13
            format = $13.
            label = 'Codigo Conta Contabil'; 
         attrib CCULPA length = 3
            format = 3.
            label = 'Codigo Culpa'; 
         attrib CDEPDC length = 8
            format = 8.
            label = 'Codigo Dependencia'; 
         attrib CEMPR length = 8
            format = 8.
            label = 'Codigo Empresa'; 
         attrib CEMPR_RAZAO length = 8
            format = 8.
            label = 'Codigo Empresa Razao'; 
         attrib CESTAB_TRANS length = $30
            format = $30.
            label = 'Codigo Estabelecimento Transacao'; 
         attrib CEVNTO_PERDA length = $10
            format = $10.
            label = 'Codigo Evento Perda'; 
         attrib CGCPJ length = 8
            label = 'Codigo GCPJ'; 
         attrib CIDTFD_CNTRL length = $50
            format = $50.
            informat = $50.
            label = 'Codigo Identificador ID Central'; 
         attrib CGRP_ATGDO_PERDA length = 8
            format = 8.
            label = 'Codigo Grupo Atingidos Perda'; 
         attrib CJUNC_DSTNO length = 8
            format = 8.
            label = 'Codigo Juncao Destino'; 
         attrib CLANC length = 8
            format = 8.
            label = 'Codigo Lancamento'; 
         attrib CLIN_NEGOC length = $3
            format = $3.
            informat = $3.
            label = 'cdLinhaNegocio'; 
         attrib CLOC_EQUIP length = 8
            format = 8.
            label = 'Codigo Local Equipamento'; 
         attrib CMAQUINA length = 8
            format = 8.
            label = 'Codigo Maquina'; 
         attrib CMOTVO_CANC length = $3
            format = $3.
            label = 'Codigo Motivo Cancelamento'; 
         attrib CMOVIM length = 4
            format = 4.
            label = 'Codigo Movimento'; 
         attrib COD_LACTO length = 5
            format = 5.
            label = 'Codigo Lançamento'; 
         attrib COSIF length = 8
            format = 8.
            label = 'COSIF'; 
         attrib CPEDIDO length = $26
            format = $26.
            label = 'Codigo Numero Pedido'; 
         attrib CPRODU length = $8
            format = $8.
            label = 'Codigo Produto'; 
         attrib CPROM length = 8
            format = 8.
            label = 'Codigo Promotora'; 
         attrib CRAIZ length = $8
            format = $8.
            label = 'Codigo Raiz'; 
         attrib CRECLA length = 8
            format = 8.
            label = 'Codigo Primeira Reclamada'; 
         attrib CREGIS_CORRT length = $21
            format = $21.
            label = 'Codigo Numero Contrato'; 
         attrib CRZ_CTBIL length = $13
            format = $13.
            label = 'Codigo Razao Contabil'; 
         attrib CSBTPO_ACAO length = 3
            format = 3.
            label = 'Codigo Subtipo Acao'; 
         attrib CSECAO length = 8
            format = 8.
            label = 'Codigo Secao'; 
         attrib CSEGUN_RECLA length = 8
            format = 8.
            label = 'Codigo Segunda Reclamada'; 
         attrib CSEQ_REGIS length = $8
            format = $8.
            label = 'Codigo Sequencia Registro'; 
         attrib CSGRP_ATGDO_PERDA length = $8
            format = $8.
            label = 'Codigo Subgrupo Atingidos Perda'; 
         attrib CSTUS length = $2
            format = $2.
            label = 'Codigo Status'; 
         attrib CTIPO_ACAO length = 4
            format = 4.
            label = 'Codigo Tipo Acao'; 
         attrib CTIPO_CARTAO length = $5
            format = $5.
            label = 'Codigo Tipo Cartao'; 
         attrib CTIPO_CTA_BDN length = 8
            format = 8.
            label = 'Codigo Tipo Cta BDN'; 
         attrib CTIPO_EQUIP length = 5
            format = 5.
            label = 'Codigo Tipo Equipamento'; 
         attrib CTIPO_FRAUD length = 3
            format = 3.
            label = 'Codigo Tipo Fraude'; 
         attrib CTIPO_MOVIM length = $1
            format = $1.
            label = 'Codigo Tipo Movimento'; 
         attrib CTIPO_OCORR_BDN length = 8
            format = 8.
            label = 'Codigo Tipo Ocorrencia BDN'; 
         attrib CTIPO_PERDA length = $2
            format = $2.
            label = 'Codigo Tipo Perda'; 
         attrib CTIPO_REGIS length = $1
            format = $1.
            label = 'Codigo Tipo Registro'; 
         attrib CTRANS length = 8
            format = 8.
            label = 'Codigo Transacao'; 
         attrib DBAIXA length = 8
            format = DDMMYY10.
            label = 'Data Baixa'; 
         attrib DCAD length = 8
            format = DDMMYY10.
            label = 'Data Cadastro'; 
         attrib DCONTR length = 8
            format = DDMMYY10.
            label = 'Data Contrato'; 
         attrib DCTBIL length = 8
            format = DDMMYY10.
            label = 'Data Contabil'; 
         attrib DDESCB length = 8
            format = DDMMYY10.
            label = 'Data Descoberta'; 
         attrib DOCORR length = 8
            format = DDMMYY10.
            label = 'Data Ocorrencia'; 
         attrib DREFERENCIA_LEGADO length = 8
            format = 8.
            label = 'Data Referencia Arquivo Legado (AAAAMM)'; 
         attrib DTRANS length = 8
            format = DDMMYY10.
            label = 'Data Transacao'; 
         attrib IARQUIVO_LEGADO length = $255
            format = $255.
            label = 'Nome Arquivo Legado'; 
         attrib IBANDE length = $50
            format = $50.
            label = 'Nome Bandeira'; 
         attrib ICIDAD_CLINT length = $30
            format = $30.
            label = 'Nome Cidade Cliente'; 
         attrib ICIDAD_ESTAB length = $12
            format = $12.
            label = 'Nome Cidade Estabelecimento'; 
         attrib ICOMAR length = $40
            format = $40.
            label = 'Nome Comarca'; 
         attrib IDESP length = $25
            format = $25.
            label = 'Nome Despesa'; 
         attrib IENVDO length = $50
            format = $50.
            label = 'Nome Envolvido'; 
         attrib IESTAD_CLINT length = $2
            format = $2.
            label = 'Nome Estado Cliente'; 
         attrib IESTAD_ESTAB length = $2
            format = $2.
            label = 'Nome Estado Estabelecimento'; 
         attrib IMUN length = $20
            format = $20.
            label = 'Nome Municipio'; 
         attrib IPAIS_TRANS length = $2
            format = $2.
            label = 'Nome Pais Transacao'; 
         attrib IPLANO_SEG length = $42
            format = $42.
            label = 'Nome Motivo Plano Segurança'; 
         attrib ISBTPO_ACAO length = $256
            format = $256.
            label = 'Nome Subtipo Acao'; 
         attrib IUF length = $2
            format = $2.
            label = 'Nome UF'; 
         attrib NBANDE length = 5
            format = 5.
            label = 'Numero Bandeira'; 
         attrib NBDN length = $18
            format = $18.
            label = 'Numero DBDN/BDN'; 
         attrib NCATAO length = $16
            format = $16.
            label = 'Numero Cartao'; 
         attrib NCOTACAO length = 8
            format = 8.
            label = 'Numero Cotacao'; 
         attrib NOPER length = $20
            format = $20.
            label = 'Numero Operacao'; 
         attrib NPROCS length = $30
            format = $30.
            label = 'Numero Processo'; 
         attrib NREF length = $23
            format = $23.
            label = 'Numero Referencia'; 
         attrib RDEPDC length = $50
            format = $50.
            label = 'Descricao Dependencia'; 
         attrib REMPR length = $50
            format = $50.
            label = 'Descricao Empresa'; 
         attrib REVENTO length = $20
            format = $20.
            label = 'Descricao Evento'; 
         attrib RHIST length = $3410
            format = $3410.
            label = 'Descricao Historico'; 
         attrib RMOTVO_BAIXA length = $50
            format = $50.
            informat = $50.
            label = 'Descricao Motivo Baixa'; 
         attrib RMOTVO_CANC length = $8
            format = $8.
            label = 'Descricao Motivo Cancelamento'; 
         attrib RPRODU length = $40
            format = $40.
            label = 'Descricao Produto'; 
         attrib RRECLA length = $50
            format = $50.
            label = 'Descricao Reclamada'; 
         attrib RSBTPO_ACAO length = $256
            format = $256.
            label = 'Descricao Subtipo Acao'; 
         attrib RSEGUN_RECLA length = $50
            format = $50.
            label = 'Descricao Segunda Reclamada'; 
         attrib RSGMTO_DBDN length = $18
            format = $18.
            label = 'Descricao Segmento DBDN'; 
         attrib RSTATUS length = $20
            format = $20.
            label = 'Descricao Status'; 
         attrib RTIPO_ACAO length = $256
            format = $256.
            label = 'Descricao Tipo Acao'; 
         attrib RTIPO_FRAUD length = $20
            format = $20.
            label = 'Descricao Tipo Fraude'; 
         attrib RTIPO_TRANS length = $1
            format = $1.
            label = 'Descricao Tipo Transacao'; 
         attrib VBAIXA length = 8
            format = COMMAX12.2
            label = 'Valor Baixa'; 
         attrib VBANCO_COMPR length = 8
            format = COMMAX12.2
            label = 'Valor Banco Comprados'; 
         attrib VCPMF_TRANS length = 8
            format = COMMAX12.2
            label = 'Valor CPMF Transacao'; 
         attrib VDESP_ACESS length = 8
            format = COMMAX12.2
            label = 'Valor  Despesa Acessoria Perda'; 
         attrib VDESP_BDSCO length = 8
            format = COMMAX12.2
            label = 'Valor Despesa Bradesco Perda'; 
         attrib VDESP_VDDOR length = 8
            format = COMMAX12.2
            label = 'Valor Despesa Vendedor Perda'; 
         attrib VORI length = 8
            format = COMMAX12.2
            label = 'Valor Original'; 
         attrib VPERDA length = 8
            format = COMMAX12.2
            label = 'Valor Perda'; 
         attrib VPERDA_RCUPC length = 8
            format = COMMAX12.2
            label = 'Valor Perda/Recuperacao'; 
         attrib VRECUP_ESTORNO length = 8
            format = COMMAX12.2
            label = 'Valor Recuperacao Estorno Perda'; 
         attrib VREEMB length = 8
            format = COMMAX12.2
            label = 'Valor Reembolso'; 
         attrib VREEMB_BDN length = 8
            format = COMMAX12.2
            label = 'Valor Reembolso BDN'; 
         attrib VTRANS length = 8
            format = COMMAX12.2
            label = 'Valor Transacao'; 
         attrib CCLASF_ENVDO length = 8
            label = 'cdClassificacaoEnvolvido'; 
         attrib CAG_CLIE length = 8
            label = 'cdAgenciaCliente'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = RO_REP.TREP_PERDAS_OP 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W2S71XS3;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_REP.TREP_PERDAS_OP, DATA)) or 
         %sysfunc(exist(RO_REP.TREP_PERDAS_OP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_REP.TREP_PERDAS_OP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

/*---- Start of Post-Process Code  ----*/ 

/*Move arquivos de origem para a pasta PROCESSADOS*/
%moveArquivo(dirorig="4859-SGRE",arqorig="SGREROCI.TXT",dir="PROCESSADOS");
%moveArquivo(dirorig="4859-SGRE",arqorig="SGRERECUP.txt",dir="PROCESSADOS");
/*---- End of Post-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            CTR_FIM                               A5J3RISO.AC00016H * 
 * Transform:       CTR_FIM                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 * Target Table:    TCTR_CARGA - RO_CTR_C.TCTR_CARGA      A5J3RISO.AQ00007Y * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC00016H);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for EGRC_RO_CTR_CARGA  */ 
LIBNAME RO_CTR_C BASE "/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/CONTROLE_CARGA/TABELA" filelockwait = 600 ;
%rcSet(&syslibrc); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_REP.TREP_PERDAS_OP, DATA)) or 
         %sysfunc(exist(RO_REP.TREP_PERDAS_OP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_REP.TREP_PERDAS_OP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(RO_REP.TREP_PERDAS_OP); 

%let _INPUT_count = 1; 
%let _INPUT = RO_REP.TREP_PERDAS_OP;
%let _INPUT_connect = ;
%let _INPUT_engine = BASE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Risco Operacional/EGRC/Produtivo/02_Repositorio/02_Tabelas_Destino/TREP_PERDAS_OP%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote(Repositorio de perdas operacionais);

%let _INPUT0 = RO_REP.TREP_PERDAS_OP;
%let _INPUT0_connect = ;
%let _INPUT0_engine = BASE;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/Risco Operacional/EGRC/Produtivo/02_Repositorio/02_Tabelas_Destino/TREP_PERDAS_OP%(Table%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote(Repositorio de perdas operacionais);

%let _OUTPUT_count = 1; 
%let _OUTPUT = RO_CTR_C.TCTR_CARGA;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = BASE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Risco Operacional/EGRC/Produtivo/03_Controle_carga/02_Tabelas_Destino/TCTR_CARGA%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = NOM_TABELA NOM_JOB NOM_LIBNAME DTH_INI DTH_FIM DAT_CARGA REFERENCIA 
        COD_RETURN_CODE;

%let _OUTPUT0 = RO_CTR_C.TCTR_CARGA;
%let _OUTPUT0_connect = ;
%let _OUTPUT0_engine = BASE;
%let _OUTPUT0_memtype = DATA;
%let _OUTPUT0_options = %nrquote();
%let _OUTPUT0_alter = %nrquote();
%let _OUTPUT0_path = %nrquote(/Risco Operacional/EGRC/Produtivo/03_Controle_carga/02_Tabelas_Destino/TCTR_CARGA%(Table%));
%let _OUTPUT0_type = 1;
%let _OUTPUT0_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT0_keep = NOM_TABELA NOM_JOB NOM_LIBNAME DTH_INI DTH_FIM DAT_CARGA REFERENCIA 
        COD_RETURN_CODE;



/* List of target columns to keep  */ 
%let _keep = NOM_TABELA NOM_JOB NOM_LIBNAME DTH_INI DTH_FIM DAT_CARGA REFERENCIA 
        COD_RETURN_CODE;
/* List of target columns to keep  */ 
%let keep = NOM_TABELA NOM_JOB NOM_LIBNAME DTH_INI DTH_FIM DAT_CARGA REFERENCIA 
        COD_RETURN_CODE;
/* rotina de controle de fim do processo
  CRIAR LIBNAME EM BASE COM OPÇAO  FILELOCKWAIT=10
  PARA EVITAR LOCK DA TABELA DE CONTROLE DE CARGA NA HORA DO APPEND 
*/



%macro Fim_Processo;

 data work.TCTR_CARGA;
       set work.TCTR_CARGA;
       DTH_FIM = datetime();
       COD_RETURN_CODE = &job_rc; 
    run;

	proc append base=RO_CTR_C.TCTR_CARGA 
                data= TCTR_CARGA force;
	run; 
%mend Fim_Processo;

%Fim_Processo;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end CTR_FIM **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

