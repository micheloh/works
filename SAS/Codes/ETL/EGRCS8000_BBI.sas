/**************************************************************************** 
 * Job:             EGRCS8000_BBI                         A5J3RISO.AA00002F * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: au-fx-ap-001                                            * 
 * Port:            8562                                                    * 
 * Location:        /Risco Operacional/EGRC/Produtivo/01_Pre_carga/03_Jobs  * 
 *                                                                          * 
 * Server:          SASApp                                A5OWOFMB.AR000002 * 
 *                                                                          * 
 * Source Tables:   BBI -                                 A5J3RISO.AR000029 * 
 *                  /RODATAPRD/ROPRODUTIVO/EGRC_RO/DADO                     * 
 *                  S/CARGA/ARQUIVO/BBI.txt                                 * 
 *                  TEVNTO_PERDA_CTA -                    A5J3RISO.AQ00009L * 
 *                   RO_PARAM.TEVNTO_PERDA_CTA                              * 
 *                  BBI - RO_PRE.BBI                      A5J3RISO.AQ000068 * 
 *                  BBI - RO_PRE.BBI                      A5J3RISO.AQ000068 * 
 *                  TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 * Target Tables:   TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 *                  BBI - RO_PRE.BBI                      A5J3RISO.AQ000068 * 
 *                  TCTR_CARGA - RO_CTR_C.TCTR_CARGA      A5J3RISO.AQ00007Y * 
 *                                                                          * 
 * Generated on:    Terça-feira, 3 de Novembro de 2015 11h20min42s BRST     * 
 * Generated by:    l970882                                                 * 
 * Version:         SAS Data Integration Studio 4.6                         * 
 ****************************************************************************/ 

/* General macro variables  */ 
%let jobID = %quote(A5J3RISO.AA00002F);
%let etls_jobName = %nrquote(EGRCS8000_BBI);
%let etls_userID = %nrquote(l970882);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc ;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8562);
%let metaServer     = %nrquote(au-fx-ap-001);

/* Set metadata options */
options metaport       = &metaPort 
        metaserver     = "&metaServer"; 

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*---- Start of Pre-Process Code  ----*/ 

/*Inclui código com as libnames*/
%include "/RODATAPRD/ROPRODUTIVO/EGRC_RO/PROGRAMAS/GERAL/DeclaracaoLibnames.sas";

/*Inclui código com funções genéricas*/
%include "/RODATAPRD/ROPRODUTIVO/EGRC_RO/PROGRAMAS/GERAL/DeclaracaoMacrosGerais.sas";
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

/*==========================================================================* 
 * Step:            File Reader                           A5J3RISO.AC0000U3 * 
 * Transform:       File Reader                                             * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    BBI -                                 A5J3RISO.AR000029 * 
 *                  /RODATAPRD/ROPRODUTIVO/EGRC_RO/DADO                     * 
 *                  S/CARGA/ARQUIVO/BBI.txt                                 * 
 * Target Table:    File Reader - work.W23G2Y5            A5J3RISO.AI0000Y5 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000U3);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

proc datasets lib = work nolist nowarn memtype = (data view);
   delete etls_W23G2Y5;
quit;

data work.etls_W23G2Y5 / view = work.etls_W23G2Y5 ; 
   infile '/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/CARGA/ARQUIVO/BBI.txt'
          lrecl = 32760
          delimiter = ';'
          dsd
          missover
          firstobs = 1; 
   ; 
   attrib CFUNC length = 8; 
   attrib CCORRL length = 8; 
   attrib DOCORR length = 8
      format = ddmmyy10.
      informat = ddmmyy10.; 
   attrib CDEPDC length = 8; 
   attrib CSECAO length = 8; 
   attrib RHIST length = $3410; 
   attrib CCORRL2 length = 8; 
   attrib CRZ_CTBIL length = $13; 
   attrib CCTA_CTBIL length = $13; 
   attrib COSIF length = 8; 
   attrib CEVNTO_PERDA length = $10; 
   attrib CGRP_ATGDO_PERDA length = 8; 
   attrib CSGRP_ATGDO_PERDA length = $8; 
   attrib CCAUSA_ATGDO_PERDA length = $8; 
   attrib CLANC length = 8; 
   attrib CTIPO_PERDA length = $2; 
   attrib VPERDA length = 8
      format = commax15.2
      informat = commax15.; 
   attrib CJUNC_DSTNO length = 8; 
   attrib DCTBIL length = 8
      format = ddmmyy10.
      informat = ddmmyy10.; 
   attrib CCPF_CNPJ length = $20; 
   attrib CBOLSA length = $1; 
   attrib SEG_CTVM length = $1; 
   attrib ASSESSOR length = $1; 
   attrib MESA_OPER length = $1; 
   
   input CFUNC CCORRL DOCORR CDEPDC CSECAO RHIST CCORRL2 CRZ_CTBIL CCTA_CTBIL 
         COSIF CEVNTO_PERDA CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA 
         CLANC CTIPO_PERDA VPERDA CJUNC_DSTNO DCTBIL CCPF_CNPJ CBOLSA SEG_CTVM 
         ASSESSOR MESA_OPER; 
   
run; 

%rcSet(&syserr); 

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W23G2Y5;
quit;

data _null_;
   put "NOTE: The following column(s) do not have a column mapping, so the"
        " value(s) will be set to missing: DDESCB";
run;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create table work.W23G2Y5 as
      select
         CFUNC   
            format = 6.
            informat = 6.,
         CCORRL   
            format = 4.
            informat = 4.,
         DOCORR,
         CDEPDC   
            format = 4.
            informat = 4.,
         CSECAO   
            format = 4.
            informat = 4.,
         RHIST,
         CCORRL2   
            format = 4.
            informat = 4.,
         CRZ_CTBIL,
         CCTA_CTBIL,
         COSIF,
         CEVNTO_PERDA,
         CGRP_ATGDO_PERDA,
         CSGRP_ATGDO_PERDA,
         CCAUSA_ATGDO_PERDA,
         CLANC   
            format = 3.
            informat = 3.,
         (compress(CTIPO_PERDA)) as CTIPO_PERDA length = 2,
         (abs(VPERDA)) as VPERDA length = 8
            format = COMMAX15.2
            informat = COMMAX15.2,
         CJUNC_DSTNO   
            format = 4.
            informat = 4.,
         DCTBIL,
         CCPF_CNPJ,
         CBOLSA length = 8,
         SEG_CTVM,
         ASSESSOR length = 8,
         MESA_OPER length = 8,
         (9242) as CEMPR_RAZAO length = 8,
         (cat(monotonic(), put(intnx('month',DCTBIL, 0), mmyyn6.), "BBI")) as CIDTFD_CNTRL length = 50,
         (input((put(year(DCTBIL), 4.) || compress(put(month(DCTBIL), Z2.)) || "01"), 8.)) as DREFERENCIA_LEGADO length = 8,
         ('BBI') as IARQUIVO_LEGADO length = 255,
         . as DDESCB length = 8
   from work.etls_W23G2Y5
   ;
quit;

%let SYSLAST = work.W23G2Y5;



/**  Step end File Reader **/

/*==========================================================================* 
 * Step:            CTR_INICIO                            A5J3RISO.AC0000U4 * 
 * Transform:       CTR_INICIO                                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    File Reader - work.W23G2Y5            A5J3RISO.AI0000Y5 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000U4);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W23G2Y5, DATA)) or 
         %sysfunc(exist(work.W23G2Y5, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W23G2Y5 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W23G2Y5); 

%let _INPUT_count = 1; 
%let _INPUT = work.W23G2Y5;
%let _INPUT_connect = ;
%let _INPUT_engine = ;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/File Reader_A5J3RISO.AI0000Y5%(WorkTable%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT0 = work.W23G2Y5;
%let _INPUT0_connect = ;
%let _INPUT0_engine = ;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/File Reader_A5J3RISO.AI0000Y5%(WorkTable%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote();

%let _OUTPUT_count = 0; 

%let Tabela = %nrquote(BBI);
%let Job = %nrquote(EGRCS8000_BBI);
%let Libname = %nrquote(RO_PRE);

%macro ctr_inicio;
	/*
	Armazena na variavel dat_referencia a data contabil a ser processada
	*/	
	%let _dat_referencia=;
	%let arquivo=;

	%let _DAT_REFERENCIA = 0;

		proc sql noprint;
		
				select  DREFERENCIA_LEGADO
				into :_DAT_REFERENCIA
				from &SYSLAST;
		
		quit;

	%let _DAT_REFERENCIA = &_DAT_REFERENCIA.;
	
		data TCTR_CARGA;
			   attrib NOM_TABELA length = $255
	            label = 'Nome da tabela'; 
	         attrib NOM_JOB length = $120
	            label = 'Nome do Job Processado'; 
	         attrib NOM_LIBNAME length = $8
	            label = 'nome da libname Utilizada'; 
	         attrib DTH_INI length = 8
	            format = Datetime20.
	            label = 'Data de ínicio do Processo'; 
	         attrib DTH_FIM length = 8
	            format = Datetime20.
	            label = 'Data de Fim do Processo'; 
	         attrib DAT_CARGA length = 8
	            format = ddmmyy10.
	            label = 'Data de Carga'; 
	         attrib REFERENCIA length = 8
	            format = 8.
	            label = 'Referencia'; 
	         attrib COD_RETURN_CODE length = 8
	            label = 'Código de Retorno do Processo'; 

			NOM_TABELA 	 	  = "&tabela.";
			NOM_JOB 		     = "&job.";
			NOM_LIBNAME 	  = "&Libname.";
			DTH_INI 		     = datetime();
			DTH_FIM 		     = .;
			DAT_CARGA 		  = today();
			REFERENCIA		   = &_DAT_REFERENCIA.;
			COD_RETURN_CODE  = .;
		run;

	%let arquivo = &tabela.;

	%put dat_ref  = &dat_referencia.;
	%put ult_dat  = &ult_dat.;

%mend;

/*
Macro Variáveis
*/

%global 	dat_referencia
			_dat_referencia
			dat_carga
			ult_dat
			dat_ref
			arquivo;

/*
Rotinas
*/

%ctr_inicio;
%put dat_ref_out: &_dat_referencia.;
%put arquivo: &tabela.;



%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end CTR_INICIO **/

/*==========================================================================* 
 * Step:            Data Validation                       A5J3RISO.AC0000U5 * 
 * Transform:       Data Validation                                         * 
 * Description:     Registra na tabela de erros do arquivo e envia por      * 
 *                   email                                                  * 
 *                                                                          * 
 * Source Table:    File Reader - work.W23G2Y5            A5J3RISO.AI0000Y5 * 
 * Target Tables:   Valid records table - work.DV_BBI     A5J3RISO.AI0000Y6 * 
 *                  Error records table -                 A5J3RISO.AI0000Y7 * 
 *                   work.DV_BBI_ERROR                                      * 
 *                  Exception records table -             A5J3RISO.AI0000Y8 * 
 *                   work.DV_BBI_EXCEC                                      * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000U5);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.W23G2Y5, DATA)) or 
         %sysfunc(exist(work.W23G2Y5, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.W23G2Y5 out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.W23G2Y5); 

proc datasets library=work nolist nowarn memtype=(data view);
 delete etls_Errors etls_Exceptions etls_target;
quit;

%macro etls_Validate; 

   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_BBI;
   quit;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete etls_Source;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) will be excluded from the mapping"
           " step: x_row, x_type, x_column, x_note, x_custom_name,"
           " x_custom_value,    x_custom_rule, x_action, x_datetime";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create table work.etls_Source as
         select
            CFUNC,
            CCORRL,
            DOCORR,
            CDEPDC,
            CSECAO,
            RHIST,
            CCORRL2,
            CRZ_CTBIL,
            CCTA_CTBIL,
            COSIF,
            CEVNTO_PERDA,
            CGRP_ATGDO_PERDA,
            CSGRP_ATGDO_PERDA,
            CCAUSA_ATGDO_PERDA,
            CLANC,
            CTIPO_PERDA,
            VPERDA,
            CJUNC_DSTNO,
            DCTBIL,
            CCPF_CNPJ,
            CBOLSA,
            SEG_CTVM length = 8,
            ASSESSOR,
            MESA_OPER,
            CEMPR_RAZAO,
            CIDTFD_CNTRL,
            DREFERENCIA_LEGADO,
            IARQUIVO_LEGADO,
            DDESCB
      from work.W23G2Y5
      ;
   quit;
   
   %let SYSLAST = work.etls_Source;
   
   %let runTime = %sysfunc(datetime()); 
   
   /* Create the Exception Report  */ 
   %macro makeReport; 
   
      %if (&m_excp eq 1) %then 
      %do; 
         options nodate; 
         
         proc sort data = etls_Exceptions; 
            by x_row; 
         run; 
         
         proc print data = etls_Exceptions noobs label; 
            title1 "Exceptions Found in Table: work.W23G2Y5"; 
            title2 "%sysfunc(datetime(),nldatmap.)"; 
         run; 
         
         options date; 
         
      %end; 
      
   %mend makeReport; 
   
   /* Delete error tables prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_BBI_ERROR;
   quit;
   
   /* Delete exception table prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_BBI_EXCEC;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_BBI;
   quit;
   
   %let m_excp = 0;
   %let cust_exp=0; 
   
   /*---- Begin checks for Custom, Missing Values, and Invalid Values  ----*/ 
   
   data etls_target
      (keep = CFUNC CCORRL DOCORR CDEPDC CSECAO RHIST CCORRL2 CRZ_CTBIL CCTA_CTBIL COSIF 
      CEVNTO_PERDA CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CLANC 
      CTIPO_PERDA VPERDA CJUNC_DSTNO DCTBIL CCPF_CNPJ CBOLSA SEG_CTVM ASSESSOR 
      MESA_OPER CEMPR_RAZAO CIDTFD_CNTRL DREFERENCIA_LEGADO IARQUIVO_LEGADO DDESCB)
     etls_Errors
      (keep = CFUNC CCORRL DOCORR CDEPDC CSECAO CCORRL2 CRZ_CTBIL CCTA_CTBIL COSIF 
      CEVNTO_PERDA CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CLANC 
      CTIPO_PERDA VPERDA CJUNC_DSTNO DCTBIL CCPF_CNPJ CBOLSA SEG_CTVM ASSESSOR 
      MESA_OPER CEMPR_RAZAO CIDTFD_CNTRL DREFERENCIA_LEGADO IARQUIVO_LEGADO DDESCB)
     etls_Exceptions
      (keep = x_row x_type x_column x_note x_custom_name x_custom_value x_custom_rule 
      x_action x_datetime CFUNC CCORRL DOCORR CDEPDC CSECAO CCORRL2 CRZ_CTBIL 
      CCTA_CTBIL COSIF CEVNTO_PERDA CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA 
      CCAUSA_ATGDO_PERDA CLANC CTIPO_PERDA VPERDA CJUNC_DSTNO DCTBIL CCPF_CNPJ 
      CBOLSA SEG_CTVM ASSESSOR MESA_OPER CEMPR_RAZAO CIDTFD_CNTRL DREFERENCIA_LEGADO 
      IARQUIVO_LEGADO DDESCB);
   
      set etls_Source end=eof;
      
      attrib x_row length = 8
         format = BEST32.
         informat = BEST32.
         label = 'Row Number'; 
      attrib x_type length = $100
         label = 'Exception Type'; 
      attrib x_column length = $100
         label = 'Column Name'; 
      attrib x_note length = $200
         label = 'Column Value'; 
      attrib x_custom_name length = $100
         label = 'Custom Name'; 
      attrib x_custom_value length = $200
         label = 'Custom Value'; 
      attrib x_custom_rule length = $250
         label = 'Custom Rule'; 
      attrib x_action length = $50
         label = 'Action Taken'; 
      attrib x_datetime length = 8
         format = nldatm.
         informat = nldatm.
         label = 'Run Time'; 
      
      i_move=0;
      retain i_excp error_rows excp_rows valid_rows cust_excp 0;
      
      x_datetime = "&etls_stepStartTime"dt;
      ETL_Error_JobRunTime = x_datetime;
      
      x_row = _n_;
      
      /*---- Custom Validation: TPPERDA Incorreto  ----*/ 
      if (CTIPO_PERDA not in ('1' , '3' , '6D' , '6C' , '7D' , '7C')) then 
      do; 
         x_custom_name = "TPPERDA Incorreto: True";
         x_custom_value = "";
         x_custom_rule = "CTIPO_PERDA not in (1 , 3 , 6D , 6C , 7D , 7C)";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (CTIPO_PERDA not in ('1' , '3' , '6D' , '6C' , '7D' , '7C')) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: DOCORR  > DCTBIL  ----*/ 
      if (DOCORR  > DCTBIL) then 
      do; 
         x_custom_name = "DOCORR  > DCTBIL: True";
         x_custom_value = "";
         x_custom_rule = "DOCORR  > DCTBIL";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (DOCORR  > DCTBIL) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: EP 98 TP 1 e 3  ----*/ 
      if (substr(CEVNTO_PERDA ,1,2) = '98'  & CTIPO_PERDA in ('1','3')) then 
      do; 
         x_custom_name = "EP 98 TP 1 e 3: True";
         x_custom_value = "";
         x_custom_rule = "substr(CEVNTO_PERDA ,1,2) = 98  & CTIPO_PERDA in (1,3)";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (substr(CEVNTO_PERDA ,1,2) = '98'  & CTIPO_PERDA in ('1','3')) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Data contabil futura  ----*/ 
      if (DCTBIL  >= date()) then 
      do; 
         x_custom_name = "Data contabil futura: True";
         x_custom_value = "";
         x_custom_rule = "DCTBIL  >= date()";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (DCTBIL  >= date()) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Código da Dependencia maior que 4 digitos  ----*/ 
      if (lengthc(strip(put(CDEPDC, 7.))) > 4) then 
      do; 
         x_custom_name = "Código da Dependencia maior que 4 digitos: True";
         x_custom_value = "";
         x_custom_rule = "lengthc(strip(put(CDEPDC, 7.))) > 4";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (lengthc(strip(put(CDEPDC, 7.))) > 4) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Codigo da Correlata maior que 4 digitos  ----*/ 
      if (lengthc(strip(put(CCORRL, 7.))) > 4) then 
      do; 
         x_custom_name = "Codigo da Correlata maior que 4 digitos: True";
         x_custom_value = "";
         x_custom_rule = "lengthc(strip(put(CCORRL, 7.))) > 4";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (lengthc(strip(put(CCORRL, 7.))) > 4) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Código da Junção de Destino maior que 4  ----*/ 
      /*----  digitos                                                    ----*/ 
      if (lengthc(strip(put(CJUNC_DSTNO, 7.))) > 4) then 
      do; 
         x_custom_name = "Código da Junção de Destino maior que 4 digitos: True";
         x_custom_value = "";
         x_custom_rule = "lengthc(strip(put(CJUNC_DSTNO, 7.))) > 4";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (lengthc(strip(put(CJUNC_DSTNO, 7.))) > 4) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Grupo Atingido pela Perda possui formato XX  ----*/ 
      if (PRXMATCH("/\b\d{1,2}\b/", put(CGRP_ATGDO_PERDA, 2.)) = 0) then 
      do; 
         x_custom_name = "Grupo Atingido pela Perda possui formato XX: True";
         x_custom_value = "";
         x_custom_rule = "PRXMATCH(/\b\d{1,2}\b/, put(CGRP_ATGDO_PERDA, 2.)) = 0";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (PRXMATCH("/\b\d{1,2}\b/", put(CGRP_ATGDO_PERDA, 2.)) = 0) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Subgrupo Atingido pela Perda possui formato  ----*/ 
      /*----  XX.XX.XX                                                       ----*/ 
      if (PRXMATCH("/\b\d{1,2}[.]\d{1,2}[.]\d{1,2}\b/", CSGRP_ATGDO_PERDA) = 0) then 
      do; 
         x_custom_name = "Subgrupo Atingido pela Perda possui formato XX.XX.XX: True";
         x_custom_value = "";
         x_custom_rule = "PRXMATCH(/\b\d{1,2}[.]\d{1,2}[.]\d{1,2}\b/, CSGRP_ATGDO_PERDA) = 0";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (PRXMATCH("/\b\d{1,2}[.]\d{1,2}[.]\d{1,2}\b/", CSGRP_ATGDO_PERDA) = 0) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Causa Atingida pela Perda possui formato  ----*/ 
      /*----  XX.XX                                                       ----*/ 
      if (PRXMATCH("/\b\d{1,2}[.]\d{1,2}\b/", CCAUSA_ATGDO_PERDA)= 0) then 
      do; 
         x_custom_name = "Causa Atingida pela Perda possui formato XX.XX: True";
         x_custom_value = "";
         x_custom_rule = "PRXMATCH(/\b\d{1,2}[.]\d{1,2}\b/, CCAUSA_ATGDO_PERDA)= 0";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (PRXMATCH("/\b\d{1,2}[.]\d{1,2}\b/", CCAUSA_ATGDO_PERDA)= 0) */
      else 
      do; 
      end;  /* else */
      
      /*---- Custom Validation: Evento da Perda possui formato XX.XX.XX  ----*/ 
      if (PRXMATCH("/\b\d{2}[.]\d{2}[.]\d{2}\b/", CEVNTO_PERDA) = 0) then 
      do; 
         x_custom_name = "Evento da Perda possui formato XX.XX.XX: True";
         x_custom_value = "";
         x_custom_rule = "PRXMATCH(/\b\d{2}[.]\d{2}[.]\d{2}\b/, CEVNTO_PERDA) = 0";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (PRXMATCH("/\b\d{2}[.]\d{2}[.]\d{2}\b/", CEVNTO_PERDA) = 0) */
      else 
      do; 
      end;  /* else */
      
      /*---- Check for Missing value for CCAUSA_ATGDO_PERDA  ----*/ 
      
      if (CCAUSA_ATGDO_PERDA eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CCAUSA_ATGDO_PERDA";
         x_note = CCAUSA_ATGDO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CCAUSA_ATGDO_PERDA is missing  */ 
      
      /*---- Check for Missing value for CCORRL  ----*/ 
      
      if (CCORRL eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CCORRL";
         x_note = CCORRL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CCORRL is missing  */ 
      
      /*---- Check for Missing value for CCTA_CTBIL  ----*/ 
      
      if (CCTA_CTBIL eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CCTA_CTBIL";
         x_note = CCTA_CTBIL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CCTA_CTBIL is missing  */ 
      
      /*---- Check for Missing value for CDEPDC  ----*/ 
      
      if (CDEPDC eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CDEPDC";
         x_note = CDEPDC;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CDEPDC is missing  */ 
      
      /*---- Check for Missing value for CEVNTO_PERDA  ----*/ 
      
      if (CEVNTO_PERDA eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CEVNTO_PERDA";
         x_note = CEVNTO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CEVNTO_PERDA is missing  */ 
      
      /*---- Check for Missing value for CGRP_ATGDO_PERDA  ----*/ 
      
      if (CGRP_ATGDO_PERDA eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CGRP_ATGDO_PERDA";
         x_note = CGRP_ATGDO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CGRP_ATGDO_PERDA is missing  */ 
      
      /*---- Check for Missing value for CJUNC_DSTNO  ----*/ 
      
      if (CJUNC_DSTNO eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CJUNC_DSTNO";
         x_note = CJUNC_DSTNO;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CJUNC_DSTNO is missing  */ 
      
      /*---- Check for Missing value for COSIF  ----*/ 
      
      if (COSIF eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "COSIF";
         x_note = COSIF;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* COSIF is missing  */ 
      
      /*---- Check for Missing value for CRZ_CTBIL  ----*/ 
      
      if (CRZ_CTBIL eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CRZ_CTBIL";
         x_note = CRZ_CTBIL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CRZ_CTBIL is missing  */ 
      
      /*---- Check for Missing value for CSGRP_ATGDO_PERDA  ----*/ 
      
      if (CSGRP_ATGDO_PERDA eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CSGRP_ATGDO_PERDA";
         x_note = CSGRP_ATGDO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CSGRP_ATGDO_PERDA is missing  */ 
      
      /*---- Check for Missing value for CTIPO_PERDA  ----*/ 
      
      if (CTIPO_PERDA eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CTIPO_PERDA";
         x_note = CTIPO_PERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CTIPO_PERDA is missing  */ 
      
      /*---- Check for Missing value for DCTBIL  ----*/ 
      
      if (DCTBIL eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "DCTBIL";
         x_note = DCTBIL;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* DCTBIL is missing  */ 
      
      /*---- Check for Missing value for DOCORR  ----*/ 
      
      if (DOCORR eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "DOCORR";
         x_note = DOCORR;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* DOCORR is missing  */ 
      
      /*---- Check for Missing value for VPERDA  ----*/ 
      
      if (VPERDA eq .) then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "VPERDA";
         x_note = VPERDA;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* VPERDA is missing  */ 
      
      /*---- Check for Missing value for RHIST  ----*/ 
      
      if (RHIST eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "RHIST";
         x_note = RHIST;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* RHIST is missing  */ 
      
      
      if i_move = 0 then
      do;
        valid_rows+1;
        output etls_target;
      
      end;
      else
      if i_move = 1 then
      do;
        error_rows+1;
        output etls_Errors;
      
      end;
      if eof then 
      do; 
         /* create macro flags  */ 
         
         call symputx("m_excp", put(i_excp, 1.));
         call symputx("cust_excp", put(cust_excp,1.));
         /* total source rows processed  */ 
         call symputx("total_source_rows",trim(left(put(_N_,9.))));
         /* total rows passed validation  */ 
         call symputx("total_valid_rows",valid_rows);
         /* total error rows processed  */ 
         call symputx("total_error_rows",error_rows);
         /* total number of exceptions  */ 
         call symputx("total_excp_rows",excp_rows);
         
      end;
      
      run;
      
      data _null_;
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - SOURCE = %trim(&total_source_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - VALID RECORDS = %trim(&total_valid_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - ERROR = %trim(&total_error_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - EXCEPTION = %trim(&total_excp_rows)";
      run;
      
      /* Update/Append to permanent table - delete work table  */ 
      proc append base=work.DV_BBI data=etls_target force;
      run;
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_target;
      quit;
      
      %let work_error_exist = %eval(%sysfunc(exist(etls_Errors, DATA)) or 
            %sysfunc(exist(etls_Errors, VIEW))); 
      
      %if &work_error_exist > 0 %then
      %do;
        proc append base=work.DV_BBI_ERROR data=etls_Errors force;
        run;
      
         proc datasets library=work memtype=(data view) nolist nowarn;
           delete etls_Errors;
         quit;
         
      %end;
      
      proc append base=work.DV_BBI_EXCEC data=etls_Exceptions(SORTEDBY=_NULL_) force;
      run;
      
      
      %makeReport; 
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_Exceptions;
      quit;
      
      
      
      %goto STEP_CONTINUE;
      
      %STEP_ERR:
      
         %let sysrc = 9999; 
         %rcSet(&sysrc); 
         
      %STEP_CONTINUE:
      
      %mend etls_Validate;
      %etls_Validate;
      
      /*---- Start of Post-Process Code  ----*/ 
            
            %macro verificaErros;
             
            	/*Verifica se a tabela de erros foi criada*/
            	%contaRegistros(_dataSet=WORK.DV_BBI_EXCEC);
             
            	/*Verifica se existe erros na tabela de erros*/
            	%if &numObs > 0 %then %do;
            		/*Grava os erros na tabela de Erros*/
            		%gerarTabelaErro(_dataSetHist=EGRC_ERR.TERRO_BBI, _dataSet=WORK.DV_BBI_EXCEC, _tamanhoHist=12, _dataHist=DCTBIL);
            		/*Move arquivo de origem para a pasta REJEITADOS*/
            		%moveArquivo(dirorig="9007-BRAD_CORRETORA_BBI",arqorig="BBI.txt",dir="REJEITADOS");
            		/*Cria o resumo do erro*/
            		%geraResumo_erro(_dataSet=WORK.DV_BBI_EXCEC, _errDataSet=TERRO_BBI);
            		/*Envia o resumo para o email*/
            		%emailErro();
            		/*Finaliza processo carregando informações na tabela de controle*/
            		%let job_rc = 8000;
            		%Fim_Processo;
            	%end;
            	/*Aborta o Job caso exista erros*/
            	%abortaExecucao(_status=&numObs);
             
            %mend verificaErros;
            
            %verificaErros;
            /*---- End of Post-Process Code  ----*/ 
            
            %rcSet(&syserr); 
            %rcSet(&sqlrc); 
            
            
            
            /**  Step end Data Validation **/
            
            /*==========================================================================* 
 * Step:            Extract                               A5J3RISO.AC0000U6 * 
 * Transform:       Extract                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Valid records table - work.DV_BBI     A5J3RISO.AI0000Y6 * 
 * Target Table:    Extract - work.W5O0DTQ0               A5J3RISO.AI0000Y9 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000U6);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.DV_BBI, DATA)) or 
         %sysfunc(exist(work.DV_BBI, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.DV_BBI out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(work.DV_BBI); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

/*---- Map the columns  ----*/ 
proc datasets lib = work nolist nowarn memtype = (data view);
   delete W5O0DTQ0;
quit;

%put %str(NOTE: Mapping columns ...);
proc sql;
   create view work.W5O0DTQ0 as
      select distinct
         DREFERENCIA_LEGADO,
         (COUNT(DISTINCT DREFERENCIA_LEGADO)) as Contagem_Data length = 8
   from &SYSLAST
   ;
quit;

%let SYSLAST = work.W5O0DTQ0;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Extract **/

/*==========================================================================* 
 * Step:            Data Validation                       A5J3RISO.AC0000U7 * 
 * Transform:       Data Validation                                         * 
 * Description:     Registra na tabela de erros do arquivo e envia por      * 
 *                   email                                                  * 
 *                                                                          * 
 * Source Table:    Extract - work.W5O0DTQ0               A5J3RISO.AI0000Y9 * 
 * Target Tables:   Valid records table - work.W5O0ECUN   A5J3RISO.AI0000YA * 
 *                  Error records table - work.W6MGSI73   A5J3RISO.AI0000YB * 
 *                  Exception records table -             A5J3RISO.AI0000YC * 
 *                   work.DV_BBI_EXCEC_DCTBIL                               * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000U7);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W5O0DTQ0); 

proc datasets library=work nolist nowarn memtype=(data view);
 delete etls_Errors etls_Exceptions etls_target;
quit;

%macro etls_Validate; 

   /* Create SAS work table from source table  */ 
   proc sql;
   create table etls_Source as
    select *
    from work.W5O0DTQ0
   ;
   quit;
   
   %let runTime = %sysfunc(datetime()); 
   
   /* Create the Exception Report  */ 
   %macro makeReport; 
   
      %if (&m_excp eq 1) %then 
      %do; 
         options nodate; 
         
         proc sort data = etls_Exceptions; 
            by x_row; 
         run; 
         
         proc print data = etls_Exceptions noobs label; 
            title1 "Exceptions Found in Table: work.W5O0DTQ0"; 
            title2 "%sysfunc(datetime(),nldatmap.)"; 
         run; 
         
         options date; 
         
      %end; 
      
   %mend makeReport; 
   
   /* Delete error tables prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W6MGSI73;
   quit;
   
   /* Delete exception table prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_BBI_EXCEC_DCTBIL;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W5O0ECUN;
   quit;
   
   %let m_excp = 0;
   %let cust_exp=0; 
   
   /*---- Begin checks for Custom, Missing Values, and Invalid Values  ----*/ 
   
   data etls_target
      (keep = DREFERENCIA_LEGADO Contagem_Data)
     etls_Errors
      (keep = DREFERENCIA_LEGADO)
     etls_Exceptions
      (keep = x_row x_type x_column x_note x_custom_name x_custom_value x_custom_rule 
      x_action x_datetime DREFERENCIA_LEGADO);
   
      set etls_Source end=eof;
      
      attrib x_row length = 8
         format = BEST32.
         informat = BEST32.
         label = 'Row Number'; 
      attrib x_type length = $100
         label = 'Exception Type'; 
      attrib x_column length = $100
         label = 'Column Name'; 
      attrib x_note length = $200
         label = 'Column Value'; 
      attrib x_custom_name length = $100
         label = 'Custom Name'; 
      attrib x_custom_value length = $200
         label = 'Custom Value'; 
      attrib x_custom_rule length = $250
         label = 'Custom Rule'; 
      attrib x_action length = $50
         label = 'Action Taken'; 
      attrib x_datetime length = 8
         format = nldatm.
         informat = nldatm.
         label = 'Run Time'; 
      
      i_move=0;
      retain i_excp error_rows excp_rows valid_rows cust_excp 0;
      
      x_datetime = "&etls_stepStartTime"dt;
      ETL_Error_JobRunTime = x_datetime;
      
      x_row = _n_;
      
      /*---- Custom Validation: Mais de uma data base na origem  ----*/ 
      if (Contagem_Data > 1) then 
      do; 
         x_custom_name = "Mais de uma data base na origem: True";
         x_custom_value = "";
         x_custom_rule = "Contagem_Data > 1";
         x_type = "Custom Validation";
         x_action = "Move row to error table";
         
         output etls_Exceptions; 
         
         i_excp = 1; 
         excp_rows + 1;
         
         i_move = 1; 
      end;  /* if (Contagem_Data > 1) */
      else 
      do; 
      end;  /* else */
      
      
      if i_move = 0 then
      do;
        valid_rows+1;
        output etls_target;
      
      end;
      else
      if i_move = 1 then
      do;
        error_rows+1;
        output etls_Errors;
      
      end;
      if eof then 
      do; 
         /* create macro flags  */ 
         
         call symputx("m_excp", put(i_excp, 1.));
         call symputx("cust_excp", put(cust_excp,1.));
         /* total source rows processed  */ 
         call symputx("total_source_rows",trim(left(put(_N_,9.))));
         /* total rows passed validation  */ 
         call symputx("total_valid_rows",valid_rows);
         /* total error rows processed  */ 
         call symputx("total_error_rows",error_rows);
         /* total number of exceptions  */ 
         call symputx("total_excp_rows",excp_rows);
         
      end;
      
      run;
      
      data _null_;
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - SOURCE = %trim(&total_source_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - VALID RECORDS = %trim(&total_valid_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - ERROR = %trim(&total_error_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - EXCEPTION = %trim(&total_excp_rows)";
      run;
      
      /* Update/Append to permanent table - delete work table  */ 
      proc append base=work.W5O0ECUN data=etls_target force;
      run;
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_target;
      quit;
      
      %let work_error_exist = %eval(%sysfunc(exist(etls_Errors, DATA)) or 
            %sysfunc(exist(etls_Errors, VIEW))); 
      
      %if &work_error_exist > 0 %then
      %do;
        proc append base=work.W6MGSI73 data=etls_Errors force;
        run;
      
         proc datasets library=work memtype=(data view) nolist nowarn;
           delete etls_Errors;
         quit;
         
      %end;
      
      proc append base=work.DV_BBI_EXCEC_DCTBIL data=etls_Exceptions(SORTEDBY=_NULL_) force;
      run;
      
      
      %makeReport; 
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_Exceptions;
      quit;
      
      
      
      %goto STEP_CONTINUE;
      
      %STEP_ERR:
      
         %let sysrc = 9999; 
         %rcSet(&sysrc); 
         
      %STEP_CONTINUE:
      
      %mend etls_Validate;
      %etls_Validate;
      
      /*---- Start of Post-Process Code  ----*/ 
            
            %macro verificaErros;
             
            	/*Verifica se a tabela de erros foi criada*/
            	%contaRegistros(_dataSet=WORK.DV_BBI_EXCEC_DCTBIL);
             
            	/*Verifica se existe erros na tabela de erros*/
            	%if &numObs > 0 %then %do;
            		/*Grava os erros na tabela de Erros*/
            		%gerarTabelaErro(_dataSetHist=EGRC_ERR.TERRO_BBI, _dataSet=WORK.DV_BBI_EXCEC_DCTBIL, _tamanhoHist=12, _dataHist=DREFERENCIA_LEGADO);
            		/*Move arquivo de origem para a pasta REJEITADOS*/
            		%moveArquivo(dirorig="9007-BRAD_CORRETORA_BBI",arqorig="BBI.txt",dir="REJEITADOS");
            		/*Cria o resumo do erro*/
            		%geraResumo_erro(_dataSet=WORK.DV_BBI_EXCEC_DCTBIL, _errDataSet=TERRO_BBI);
            		/*Envia o resumo para o email*/
            		%emailErro();
            		/*Finaliza processo carregando informações na tabela de controle*/
            		%let job_rc = 8000;
            		%Fim_Processo;
            	%end;
            	/*Aborta o Job caso exista erros*/
            	%abortaExecucao(_status=&numObs);
             
            %mend verificaErros;
            
            %verificaErros;
            /*---- End of Post-Process Code  ----*/ 
            
            %rcSet(&syserr); 
            %rcSet(&sqlrc); 
            
            
            
            /**  Step end Data Validation **/
            
            /*==========================================================================* 
 * Step:            Join                                  A5J3RISO.AC0000U8 * 
 * Transform:       Join                                                    * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   Valid records table - work.DV_BBI     A5J3RISO.AI0000Y6 * 
 *                  TEVNTO_PERDA_CTA -                    A5J3RISO.AQ00009L * 
 *                   RO_PARAM.TEVNTO_PERDA_CTA                              * 
 * Target Table:    Join - work.W24WC2J                   A5J3RISO.AI0000YD * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000U8);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for EGRC_RO_PARAMETROS  */ 
LIBNAME RO_PARAM BASE "/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/PARAMETROS/TABELA" filelockwait = 600 ;
%rcSet(&syslibrc); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(work.DV_BBI, DATA)) or 
         %sysfunc(exist(work.DV_BBI, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = work.DV_BBI out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

proc datasets lib = work nolist nowarn memtype = (data view);
   delete W24WC2J;
quit;

proc sql;
   create view work.W24WC2J as
   select
      DV_BBI.CFUNC length = 8,
      DV_BBI.CCORRL length = 8,
      DV_BBI.DOCORR length = 8   
         format = ddmmyy10.
         informat = ddmmyy10.,
      DV_BBI.CDEPDC length = 8,
      DV_BBI.CSECAO length = 8,
      DV_BBI.RHIST length = 3410,
      DV_BBI.CCORRL2 length = 8,
      DV_BBI.CRZ_CTBIL length = 13,
      DV_BBI.CCTA_CTBIL length = 13,
      DV_BBI.COSIF length = 8,
      DV_BBI.CEVNTO_PERDA length = 10,
      DV_BBI.CGRP_ATGDO_PERDA length = 8,
      DV_BBI.CSGRP_ATGDO_PERDA length = 8,
      DV_BBI.CCAUSA_ATGDO_PERDA length = 8,
      DV_BBI.CLANC length = 8,
      DV_BBI.CTIPO_PERDA length = 2,
      DV_BBI.VPERDA length = 8   
         format = Commax15.2
         informat = Commax15.2,
      DV_BBI.CJUNC_DSTNO length = 8,
      DV_BBI.DCTBIL length = 8   
         format = ddmmyy10.
         informat = ddmmyy10.,
      DV_BBI.CCPF_CNPJ length = 20,
      DV_BBI.CBOLSA length = 8,
      DV_BBI.SEG_CTVM length = 8,
      DV_BBI.ASSESSOR length = 8,
      DV_BBI.MESA_OPER length = 8,
      DV_BBI.CEMPR_RAZAO length = 8,
      DV_BBI.CIDTFD_CNTRL length = 50,
      DV_BBI.DREFERENCIA_LEGADO length = 8,
      DV_BBI.IARQUIVO_LEGADO length = 255,
      DV_BBI.DDESCB length = 8,
      TEVNTO_PERDA_CTA.CLIN_NEGOC length = 3   
         format = $3.
         informat = $3.
         label = 'cdLinhaNegocio'
   from
      work.DV_BBI as DV_BBI left join 
      RO_PARAM.TEVNTO_PERDA_CTA as TEVNTO_PERDA_CTA
         on
         (
            DV_BBI.CDEPDC = TEVNTO_PERDA_CTA.CDEPDC
            and DV_BBI.DCTBIL >= TEVNTO_PERDA_CTA.DABERT
            and DV_BBI.DCTBIL < TEVNTO_PERDA_CTA.DENCRR
         )
   ;
quit;

%global etls_sql_pushDown;
%let etls_sql_pushDown = &sys_sql_ip_all;

%rcSet(&sqlrc); 



/**  Step end Join **/

/*==========================================================================* 
 * Step:            Data Validation                       A5J3RISO.AC0000U9 * 
 * Transform:       Data Validation                                         * 
 * Description:     Registra na tabela de erros de Carimbo e envia por      * 
 *                   email                                                  * 
 *                                                                          * 
 * Source Table:    Join - work.W24WC2J                   A5J3RISO.AI0000YD * 
 * Target Tables:   Valid records table - work.DV_BBI_CAR A5J3RISO.AI0000YE * 
 *                  Error records table -                 A5J3RISO.AI0000YF * 
 *                   work.DV_BBI_CAR_ERROR                                  * 
 *                  Exception records table -             A5J3RISO.AI0000YG * 
 *                   work.DV_BBI_CAR_EXCEC                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000U9);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recnt = -1;
%let SYSLAST = %nrquote(work.W24WC2J); 

proc datasets library=work nolist nowarn memtype=(data view);
 delete etls_Errors etls_Exceptions etls_target;
quit;

%macro etls_Validate; 

   /* Create SAS work table from source table  */ 
   proc sql;
   create table etls_Source as
    select *
    from work.W24WC2J
   ;
   quit;
   
   %let runTime = %sysfunc(datetime()); 
   
   /* Create the Exception Report  */ 
   %macro makeReport; 
   
      %if (&m_excp eq 1) %then 
      %do; 
         options nodate; 
         
         proc sort data = etls_Exceptions; 
            by x_row; 
         run; 
         
         proc print data = etls_Exceptions noobs label; 
            title1 "Exceptions Found in Table: work.W24WC2J"; 
            title2 "%sysfunc(datetime(),nldatmap.)"; 
         run; 
         
         options date; 
         
      %end; 
      
   %mend makeReport; 
   
   /* Delete error tables prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_BBI_CAR_ERROR;
   quit;
   
   /* Delete exception table prior to running data validation steps  */ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_BBI_CAR_EXCEC;
   quit;
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete DV_BBI_CAR;
   quit;
   
   %let m_excp = 0;
   %let cust_exp=0; 
   
   /*---- Begin checks for Custom, Missing Values, and Invalid Values  ----*/ 
   
   data etls_target
      (keep = CFUNC CCORRL DOCORR CDEPDC CSECAO RHIST CCORRL2 CRZ_CTBIL CCTA_CTBIL COSIF 
      CEVNTO_PERDA CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CLANC 
      CTIPO_PERDA VPERDA CJUNC_DSTNO DCTBIL CCPF_CNPJ CBOLSA SEG_CTVM ASSESSOR 
      MESA_OPER CEMPR_RAZAO CIDTFD_CNTRL CLIN_NEGOC DDESCB DREFERENCIA_LEGADO 
      IARQUIVO_LEGADO)
     etls_Errors
      (keep = CFUNC CCORRL DOCORR CDEPDC CSECAO CCORRL2 COSIF CGRP_ATGDO_PERDA 
      CSGRP_ATGDO_PERDA CCAUSA_ATGDO_PERDA CLANC CTIPO_PERDA VPERDA CJUNC_DSTNO 
      DCTBIL CBOLSA SEG_CTVM ASSESSOR MESA_OPER CRZ_CTBIL CLIN_NEGOC CCTA_CTBIL 
      CEVNTO_PERDA CCPF_CNPJ CEMPR_RAZAO CIDTFD_CNTRL DREFERENCIA_LEGADO 
      IARQUIVO_LEGADO DDESCB)
     etls_Exceptions
      (keep = x_row x_type x_column x_note x_custom_name x_custom_value x_custom_rule 
      x_action x_datetime CFUNC CCORRL DOCORR CDEPDC CSECAO CCORRL2 CRZ_CTBIL 
      CCTA_CTBIL COSIF CEVNTO_PERDA CGRP_ATGDO_PERDA CSGRP_ATGDO_PERDA 
      CCAUSA_ATGDO_PERDA CLANC CTIPO_PERDA VPERDA CJUNC_DSTNO DCTBIL CCPF_CNPJ 
      CBOLSA SEG_CTVM ASSESSOR MESA_OPER CEMPR_RAZAO CIDTFD_CNTRL DREFERENCIA_LEGADO 
      IARQUIVO_LEGADO DDESCB CLIN_NEGOC);
   
      set etls_Source end=eof;
      
      attrib x_row length = 8
         format = BEST32.
         informat = BEST32.
         label = 'Row Number'; 
      attrib x_type length = $100
         label = 'Exception Type'; 
      attrib x_column length = $100
         label = 'Column Name'; 
      attrib x_note length = $200
         label = 'Column Value'; 
      attrib x_custom_name length = $100
         label = 'Custom Name'; 
      attrib x_custom_value length = $200
         label = 'Custom Value'; 
      attrib x_custom_rule length = $250
         label = 'Custom Rule'; 
      attrib x_action length = $50
         label = 'Action Taken'; 
      attrib x_datetime length = 8
         format = nldatm.
         informat = nldatm.
         label = 'Run Time'; 
      
      i_move=0;
      retain i_excp error_rows excp_rows valid_rows cust_excp 0;
      
      x_datetime = "&etls_stepStartTime"dt;
      ETL_Error_JobRunTime = x_datetime;
      
      x_row = _n_;
      
      /*---- Check for Missing value for CLIN_NEGOC  ----*/ 
      
      if (CLIN_NEGOC eq "") then 
      do;
         /* save record to exceptions table  */ 
         
         x_column = "CLIN_NEGOC";
         x_note = CLIN_NEGOC;
         x_type = "Missing Value";
         x_action = "Move row to error table ";
         x_custom_name = "";
         x_custom_value = "";
         x_custom_rule = "";
         
         output etls_Exceptions;
         
         /* set flags  */ 
         i_excp = 1;
         i_move = 1;
         excp_rows+1;
         
      end;  /* CLIN_NEGOC is missing  */ 
      
      
      if i_move = 0 then
      do;
        valid_rows+1;
        output etls_target;
      
      end;
      else
      if i_move = 1 then
      do;
        error_rows+1;
        output etls_Errors;
      
      end;
      if eof then 
      do; 
         /* create macro flags  */ 
         
         call symputx("m_excp", put(i_excp, 1.));
         call symputx("cust_excp", put(cust_excp,1.));
         /* total source rows processed  */ 
         call symputx("total_source_rows",trim(left(put(_N_,9.))));
         /* total rows passed validation  */ 
         call symputx("total_valid_rows",valid_rows);
         /* total error rows processed  */ 
         call symputx("total_error_rows",error_rows);
         /* total number of exceptions  */ 
         call symputx("total_excp_rows",excp_rows);
         
      end;
      
      run;
      
      data _null_;
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - SOURCE = %trim(&total_source_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - VALID RECORDS = %trim(&total_valid_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - ERROR = %trim(&total_error_rows)";
         putlog "NOTE: DATA VALIDATION SUMMARY: Total rows - EXCEPTION = %trim(&total_excp_rows)";
      run;
      
      /* Update/Append to permanent table - delete work table  */ 
      proc append base=work.DV_BBI_CAR data=etls_target force;
      run;
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_target;
      quit;
      
      %let work_error_exist = %eval(%sysfunc(exist(etls_Errors, DATA)) or 
            %sysfunc(exist(etls_Errors, VIEW))); 
      
      %if &work_error_exist > 0 %then
      %do;
        proc append base=work.DV_BBI_CAR_ERROR data=etls_Errors force;
        run;
      
         proc datasets library=work memtype=(data view) nolist nowarn;
           delete etls_Errors;
         quit;
         
      %end;
      
      proc append base=work.DV_BBI_CAR_EXCEC data=etls_Exceptions(SORTEDBY=_NULL_) force;
      run;
      
      
      %makeReport; 
      
      proc datasets library=work memtype=(data view) nolist nowarn;
        delete etls_Exceptions;
      quit;
      
      
      
      %goto STEP_CONTINUE;
      
      %STEP_ERR:
      
         %let sysrc = 9999; 
         %rcSet(&sysrc); 
         
      %STEP_CONTINUE:
      
      %mend etls_Validate;
      %etls_Validate;
      
      /*---- Start of Post-Process Code  ----*/ 
            
            %macro verificaErros;
             
            	/*Verifica se a tabela de erros foi criada*/
            	%contaRegistros(_dataSet=WORK.DV_BBI_CAR_EXCEC);
             
            	/*Verifica se existe erros na tabela de erros*/
            	%if &numObs > 0 %then %do;
            		/*Grava os erros na tabela de Erros*/
            		%gerarTabelaErro(_dataSetHist=EGRC_ERR.TERRO_BBI, _dataSet=WORK.DV_BBI_CAR_EXCEC, _tamanhoHist=12, _dataHist=DCTBIL);
            		/*Move arquivo de origem para a pasta REJEITADOS*/
            		%moveArquivo(dirorig="9007-BRAD_CORRETORA_BBI",arqorig="BBI.txt",dir="REJEITADOS");
            		/*Cria o resumo do erro*/
            		%geraResumo_erro(_dataSet=WORK.DV_BBI_CAR_EXCEC, _errDataSet=TERRO_BBI);
            		/*Envia o resumo para o email*/
            		%emailErro();
            		/*Finaliza processo carregando informações na tabela de controle*/
            		%let job_rc = 8000;
            		%Fim_Processo;
            	%end;
            	/*Aborta o Job caso exista erros*/
            	%abortaExecucao(_status=&numObs);
             
            %mend verificaErros;
            
            %verificaErros;
            /*---- End of Post-Process Code  ----*/ 
            
            %rcSet(&syserr); 
            %rcSet(&sqlrc); 
            
            
            
            /**  Step end Data Validation **/
            
            /*==========================================================================* 
 * Step:            Table Loader                          A5J3RISO.AC0000UA * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    Valid records table - work.DV_BBI_CAR A5J3RISO.AI0000YE * 
 * Target Table:    BBI - RO_PRE.BBI                      A5J3RISO.AQ000068 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000UA);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for EGRC_RO_PRE_CARGA  */ 
LIBNAME RO_PRE BASE "/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/CARGA/TABELA/PRE_CARGA";
%rcSet(&syslibrc); 

%let SYSLAST = %nrquote(work.DV_BBI_CAR); 

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: Replace - EntireTable
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W2S6OSKD;
   quit;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.W2S6OSKD as
         select
            CCORRL,
            DOCORR,
            CDEPDC,
            CSECAO,
            RHIST,
            CCORRL2,
            CRZ_CTBIL,
            CCTA_CTBIL,
            COSIF,
            CEVNTO_PERDA,
            CGRP_ATGDO_PERDA,
            CSGRP_ATGDO_PERDA,
            CCAUSA_ATGDO_PERDA,
            CLANC,
            CTIPO_PERDA,
            VPERDA,
            CJUNC_DSTNO,
            DCTBIL,
            CCPF_CNPJ,
            CEMPR_RAZAO,
            CIDTFD_CNTRL,
            CLIN_NEGOC,
            DDESCB,
            DREFERENCIA_LEGADO,
            IARQUIVO_LEGADO
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.W2S6OSKD;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(RO_PRE.BBI, DATA)) or 
         %sysfunc(exist(RO_PRE.BBI, VIEW))); 
   
   %if &etls_tableExist %then 
   %do;/* table exists  */ 
      %let etls_hasPreExistingConstraint=0; 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      %let etls_otherTablesReferToThisTable=0;
      
      %macro etls_CIContents(table=,workTableOut=,inDSOptions=);
         %put NOTE: Building table listing Constraints and Indexes for: &table;
         proc datasets lib=work nolist; delete &workTableOut; quit;
         proc contents data=&table&inDSOptions out2=&workTableOut noprint; run;
         
         data &workTableOut;
            length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
            set &workTableOut;
            type=upcase(type);
            if type eq 'REFERENTIAL' then
            do;
               put "WARNING%QUOTE(:) Target table is referenced by constraints in"
                    " another table: " ref;
               call symput('etls_otherTablesReferToThisTable','1');
               delete;
            end;
            if type='INDEX' and ICOwn eq 'YES' then delete;
         run;
         %rcSet(&syserr); 
         
      %mend etls_CIContents;
      
      %etls_CIContents(table=RO_PRE.BBI, workTableOut=etls_commands, inDSOptions=);
      
      %if &etls_otherTablesReferToThisTable %then 
         %put WARNING%QUOTE(:) Replacing entire table will fail. Consider an alternate load technique or revising constraints.; 
      %else 
      %do; /* okay - remove foreign keys  */ 
      
         data etls_commands_F; 
            set etls_commands; 
            if upcase(type)="FOREIGN KEY" then 
            do; 
               command='ic delete '||trim(name)||';';
               output etls_commands_F; 
            end; 
         run; 
         
         %put %str(NOTE: Removing foreign keys before dropping table...);
         data _null_;
            set etls_commands_F;
            %rcSet(&syserr); 
            
      %end; /* okay - remove foreign keys  */ 
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_commands etls_commands_F;
      quit;
      
      /*---- Drop a table  ----*/ 
      %put %str(NOTE: Dropping table ...);
      proc datasets lib = RO_PRE nolist nowarn memtype = (data view);
         delete BBI;
      quit;
      
      %rcSet(&syserr); 
      
      %let etls_tableExist = 0;
      
   %end; /* table exists  */ 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data RO_PRE.BBI;
         attrib CCORRL length = 8; 
         attrib DOCORR length = 8
            format = ddmmyy10.
            informat = ddmmyy10.; 
         attrib CDEPDC length = 8; 
         attrib CSECAO length = 8; 
         attrib RHIST length = $3410; 
         attrib CCORRL2 length = 8; 
         attrib CRZ_CTBIL length = $13; 
         attrib CCTA_CTBIL length = $13; 
         attrib COSIF length = 8; 
         attrib CEVNTO_PERDA length = $10; 
         attrib CGRP_ATGDO_PERDA length = 8; 
         attrib CSGRP_ATGDO_PERDA length = $8; 
         attrib CCAUSA_ATGDO_PERDA length = $8; 
         attrib CLANC length = 8; 
         attrib CTIPO_PERDA length = $2; 
         attrib VPERDA length = 8
            format = Commax15.2
            informat = Commax15.2; 
         attrib CJUNC_DSTNO length = 8; 
         attrib DCTBIL length = 8
            format = ddmmyy10.
            informat = ddmmyy10.; 
         attrib CCPF_CNPJ length = $20; 
         attrib CEMPR_RAZAO length = 8; 
         attrib CIDTFD_CNTRL length = $50; 
         attrib CLIN_NEGOC length = $3
            format = $3.
            informat = $3.
            label = 'cdLinhaNegocio'; 
         attrib DDESCB length = 8; 
         attrib DREFERENCIA_LEGADO length = 8; 
         attrib IARQUIVO_LEGADO length = $255; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = RO_PRE.BBI 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W2S6OSKD;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_PRE.BBI, DATA)) or 
         %sysfunc(exist(RO_PRE.BBI, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_PRE.BBI out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            CTR_REPROCESSAMENTO                   A5J3RISO.AC0000UB * 
 * Transform:       CTR_REPROCESSAMENTO                                     * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    BBI - RO_PRE.BBI                      A5J3RISO.AQ000068 * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000UB);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_PRE.BBI, DATA)) or 
         %sysfunc(exist(RO_PRE.BBI, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_PRE.BBI out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(RO_PRE.BBI); 

%let _INPUT_count = 1; 
%let _INPUT = RO_PRE.BBI;
%let _INPUT_connect = ;
%let _INPUT_engine = BASE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Risco Operacional/EGRC/Produtivo/01_Pre_carga/02_Tabelas_Destino/BBI%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();

%let _INPUT0 = RO_PRE.BBI;
%let _INPUT0_connect = ;
%let _INPUT0_engine = BASE;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/Risco Operacional/EGRC/Produtivo/01_Pre_carga/02_Tabelas_Destino/BBI%(Table%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote();

%let _OUTPUT_count = 0; 

%let NomeArquivo = %nrquote(BBI);


%macro CtrReprocessamento;

	/*
	Verificar se existe um reprocessamento pendente
	*/
	%let referencia=;

	/*
	Verificar se a tabela de controle existe
	*/
	%let etls_recCheckExist1 = %eval(%sysfunc(exist(RO_PARAM.TCTR_REPROC, DATA)) or 
        %sysfunc(exist(RO_PARAM.TCTR_REPROC, VIEW))); 

	%if (&etls_recCheckExist1) %then
		%do;
			
			/*
			Verifica se existe um reprocessamento pendente
			*/
			proc sql noprint;
				select DREFERENCIA_LEGADO
				into :referencia
				from RO_PARAM.TCTR_REPROC
				where IARQUIVO_LEGADO = "&nomeArquivo."
				and 	DREFERENCIA_LEGADO = &_DAT_REFERENCIA.
				and 	CPROCESSADO = "N";
			quit;
			
			%let referencia = &referencia.;		
			
			%if &referencia. ne  %then
			%do;
				/*
				Exclui todas as informações do arquivo e referencia em questão do repositorio
				*/
				proc sql noprint;
					Delete * from RO_REP.TREP_PERDAS_OP
					where IARQUIVO_LEGADO = "&nomeArquivo."
					and	DREFERENCIA_LEGADO = &referencia.;
				quit;	
			
				/*
				Atualiza o controle de reprocessamento
				*/

				proc sql noprint;
					Update RO_PARAM.TCTR_REPROC
					Set CPROCESSADO = "S",
						 DTH_EXECUCAO = %sysfunc(datetime())
					where IARQUIVO_LEGADO = "&nomeArquivo."
					and	DREFERENCIA_LEGADO = &referencia.;
				quit;	
							
			%end;
	
	%end;

%mend CtrReprocessamento;



%CtrReprocessamento;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end CTR_REPROCESSAMENTO **/

/*==========================================================================* 
 * Step:            Table Loader                          A5J3RISO.AC0000UC * 
 * Transform:       Table Loader (Version 2.1)                              * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    BBI - RO_PRE.BBI                      A5J3RISO.AQ000068 * 
 * Target Table:    TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000UC);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for EGRC_RO_REP  */ 
LIBNAME RO_REP BASE "/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/REPOSITORIO/TABELA" filelockwait=600 ;
%rcSet(&syslibrc); 

%let SYSLAST = %nrquote(RO_PRE.BBI); 

%let ETLS_SYSLAST = &SYSLAST;
/*---- Start of Pre-Process Code  ----*/ 

/*Cria o resumo da carga*/
%geraResumo_ok(_dataSet=&SYSLAST.);
/*---- End of Pre-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 

%let SYSLAST = &ETLS_SYSLAST;

%let SYS_SQL_IP_SPEEDO = Y;
%let SYS_SQL_MAPPUTTO = sas_put;
%let SYS_SQLREDUCEPUT = DBMS;
%global etls_sql_pushDown;
%let etls_sql_pushDown = -1;
option DBIDIRECTEXEC;

%global etls_tableExist;
%global etls_numIndex;
%global etls_lastTable;
%let etls_tableExist = -1; 
%let etls_numIndex = -1; 
%let etls_lastTable = &SYSLAST; 

/*---- Define load data macro  ----*/ 

/* --------------------------------------------------------------
   Load Technique Selection: AppendToExisting - AppendProc
   Constraint and index action selections: 'ASIS','ASIS','ASIS','ASIS'
   Additional options selections... 
      Set unmapped to missing on updates: false 
   -------------------------------------------------------------- */
%macro etls_loader;

   %let etls_tableOptions = ;
   
   /*---- Map the columns  ----*/ 
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W2S6OSTN;
   quit;
   
   data _null_;
      put "NOTE: The following column(s) do not have a column mapping, so the"
           " value(s) will be set to missing: CAJUST, CAREA, CBANDE, CBIN_CATAO,"
           " CCATEG_ESTAB, CCPMF_BDN, CCTA_CLIE,    CCULPA, CEMPR, CESTAB_TRANS,"
           " CGCPJ, CLOC_EQUIP, CMAQUINA, CMOTVO_CANC,    CMOVIM, COD_LACTO,"
           " CPEDIDO, CPRODU, CPROM, CRAIZ, CRECLA, CREGIS_CORRT,   "
           " CSBTPO_ACAO, CSEGUN_RECLA, CSEQ_REGIS, CSTUS, CTIPO_ACAO,"
           " CTIPO_CARTAO,    CTIPO_CTA_BDN, CTIPO_EQUIP, CTIPO_FRAUD,"
           " CTIPO_MOVIM, CTIPO_OCORR_BDN,    CTIPO_REGIS, CTRANS, DBAIXA, DCAD,"
           " DCONTR, DTRANS, IBANDE, ICIDAD_CLINT,    ICIDAD_ESTAB, ICOMAR,"
           " IDESP, IENVDO, IESTAD_CLINT, IESTAD_ESTAB, IMUN,    IPAIS_TRANS,"
           " IPLANO_SEG, ISBTPO_ACAO, IUF, NBANDE, NBDN, NCATAO, NCOTACAO,   "
           " NOPER, NPROCS, NREF, RDEPDC, REMPR, REVENTO, RMOTVO_BAIXA,"
           " RMOTVO_CANC,    RPRODU, RRECLA, RSBTPO_ACAO, RSEGUN_RECLA,"
           " RSGMTO_DBDN, RSTATUS, RTIPO_ACAO,    RTIPO_FRAUD, RTIPO_TRANS,"
           " VBAIXA, VBANCO_COMPR, VCPMF_TRANS, VDESP_ACESS,    VDESP_BDSCO,"
           " VDESP_VDDOR, VORI, VPERDA_RCUPC, VRECUP_ESTORNO, VREEMB,   "
           " VREEMB_BDN, VTRANS, CCLASF_ENVDO, CAG_CLIE";
   run;
   
   %put %str(NOTE: Mapping columns ...);
   proc sql;
      create view work.W2S6OSTN as
         select
            "" as CAJUST length = 20
               format = $20.,
            "" as CAREA length = 8
               format = $8.,
            "" as CBANDE length = 5
               format = $5.,
            "" as CBIN_CATAO length = 8
               format = $8.,
            . as CCATEG_ESTAB length = 4
               format = 4.,
            CCAUSA_ATGDO_PERDA   
               format = $8.,
            CCORRL   
               format = 8.,
            CCORRL2   
               format = 8.,
            CCPF_CNPJ   
               format = $20.,
            . as CCPMF_BDN length = 8
               format = 8.,
            . as CCTA_CLIE length = 8
               format = 8.,
            CCTA_CTBIL   
               format = $13.,
            . as CCULPA length = 3
               format = 3.,
            CDEPDC   
               format = 8.,
            . as CEMPR length = 8
               format = 8.,
            CEMPR_RAZAO   
               format = 8.,
            "" as CESTAB_TRANS length = 30
               format = $30.,
            CEVNTO_PERDA   
               format = $10.,
            . as CGCPJ length = 8,
            CIDTFD_CNTRL   
               format = $50.
               informat = $50.,
            CGRP_ATGDO_PERDA   
               format = 8.,
            CJUNC_DSTNO   
               format = 8.,
            CLANC   
               format = 8.,
            CLIN_NEGOC,
            . as CLOC_EQUIP length = 8
               format = 8.,
            . as CMAQUINA length = 8
               format = 8.,
            "" as CMOTVO_CANC length = 3
               format = $3.,
            . as CMOVIM length = 4
               format = 4.,
            . as COD_LACTO length = 5
               format = 5.,
            COSIF   
               format = 8.,
            "" as CPEDIDO length = 26
               format = $26.,
            "" as CPRODU length = 8
               format = $8.,
            . as CPROM length = 8
               format = 8.,
            "" as CRAIZ length = 8
               format = $8.,
            . as CRECLA length = 8
               format = 8.,
            "" as CREGIS_CORRT length = 21
               format = $21.,
            CRZ_CTBIL   
               format = $13.,
            . as CSBTPO_ACAO length = 3
               format = 3.,
            CSECAO   
               format = 8.,
            . as CSEGUN_RECLA length = 8
               format = 8.,
            "" as CSEQ_REGIS length = 8
               format = $8.,
            CSGRP_ATGDO_PERDA   
               format = $8.,
            "" as CSTUS length = 2
               format = $2.,
            . as CTIPO_ACAO length = 4
               format = 4.,
            "" as CTIPO_CARTAO length = 5
               format = $5.,
            . as CTIPO_CTA_BDN length = 8
               format = 8.,
            . as CTIPO_EQUIP length = 5
               format = 5.,
            . as CTIPO_FRAUD length = 3
               format = 3.,
            "" as CTIPO_MOVIM length = 1
               format = $1.,
            . as CTIPO_OCORR_BDN length = 8
               format = 8.,
            CTIPO_PERDA   
               format = $2.,
            "" as CTIPO_REGIS length = 1
               format = $1.,
            . as CTRANS length = 8
               format = 8.,
            . as DBAIXA length = 8
               format = DDMMYY10.,
            . as DCAD length = 8
               format = DDMMYY10.,
            . as DCONTR length = 8
               format = DDMMYY10.,
            DCTBIL,
            DDESCB   
               format = DDMMYY10.,
            DOCORR,
            DREFERENCIA_LEGADO   
               format = 8.,
            . as DTRANS length = 8
               format = DDMMYY10.,
            IARQUIVO_LEGADO   
               format = $255.,
            "" as IBANDE length = 50
               format = $50.,
            "" as ICIDAD_CLINT length = 30
               format = $30.,
            "" as ICIDAD_ESTAB length = 12
               format = $12.,
            "" as ICOMAR length = 40
               format = $40.,
            "" as IDESP length = 25
               format = $25.,
            "" as IENVDO length = 50
               format = $50.,
            "" as IESTAD_CLINT length = 2
               format = $2.,
            "" as IESTAD_ESTAB length = 2
               format = $2.,
            "" as IMUN length = 20
               format = $20.,
            "" as IPAIS_TRANS length = 2
               format = $2.,
            "" as IPLANO_SEG length = 42
               format = $42.,
            "" as ISBTPO_ACAO length = 256
               format = $256.,
            "" as IUF length = 2
               format = $2.,
            . as NBANDE length = 5
               format = 5.,
            "" as NBDN length = 18
               format = $18.,
            "" as NCATAO length = 16
               format = $16.,
            . as NCOTACAO length = 8
               format = 8.,
            "" as NOPER length = 20
               format = $20.,
            "" as NPROCS length = 30
               format = $30.,
            "" as NREF length = 23
               format = $23.,
            "" as RDEPDC length = 50
               format = $50.,
            "" as REMPR length = 50
               format = $50.,
            "" as REVENTO length = 20
               format = $20.,
            RHIST   
               format = $3410.,
            "" as RMOTVO_BAIXA length = 50
               format = $50.
               informat = $50.,
            "" as RMOTVO_CANC length = 8
               format = $8.,
            "" as RPRODU length = 40
               format = $40.,
            "" as RRECLA length = 50
               format = $50.,
            "" as RSBTPO_ACAO length = 256
               format = $256.,
            "" as RSEGUN_RECLA length = 50
               format = $50.,
            "" as RSGMTO_DBDN length = 18
               format = $18.,
            "" as RSTATUS length = 20
               format = $20.,
            "" as RTIPO_ACAO length = 256
               format = $256.,
            "" as RTIPO_FRAUD length = 20
               format = $20.,
            "" as RTIPO_TRANS length = 1
               format = $1.,
            . as VBAIXA length = 8
               format = COMMAX12.2,
            . as VBANCO_COMPR length = 8
               format = COMMAX12.2,
            . as VCPMF_TRANS length = 8
               format = COMMAX12.2,
            . as VDESP_ACESS length = 8
               format = COMMAX12.2,
            . as VDESP_BDSCO length = 8
               format = COMMAX12.2,
            . as VDESP_VDDOR length = 8
               format = COMMAX12.2,
            . as VORI length = 8
               format = COMMAX12.2,
            VPERDA   
               format = COMMAX12.2,
            . as VPERDA_RCUPC length = 8
               format = COMMAX12.2,
            . as VRECUP_ESTORNO length = 8
               format = COMMAX12.2,
            . as VREEMB length = 8
               format = COMMAX12.2,
            . as VREEMB_BDN length = 8
               format = COMMAX12.2,
            . as VTRANS length = 8
               format = COMMAX12.2,
            . as CCLASF_ENVDO length = 8,
            . as CAG_CLIE length = 8
      from &etls_lastTable
      ;
   quit;
   
   %let SYSLAST = work.W2S6OSTN;
   
   %let etls_lastTable = &SYSLAST; 
   %let etls_tableOptions = ; 
   
   /* Determine if the target table exists  */ 
   %let etls_tableExist = %eval(%sysfunc(exist(RO_REP.TREP_PERDAS_OP, DATA)) or 
         %sysfunc(exist(RO_REP.TREP_PERDAS_OP, VIEW))); 
   
   /*---- Create a new table  ----*/ 
   %if (&etls_tableExist eq 0) %then 
   %do;  /* if table does not exist  */ 
   
      %put %str(NOTE: Creating table ...);
      
      data RO_REP.TREP_PERDAS_OP
              (label = 'Repositorio de perdas operacionais');
         attrib CAJUST length = $20
            format = $20.
            label = 'Codigo Ajuste'; 
         attrib CAREA length = $8
            format = $8.
            label = 'Codigo Area'; 
         attrib CBANDE length = $5
            format = $5.
            label = 'Codigo Bandeira'; 
         attrib CBIN_CATAO length = $8
            format = $8.
            label = 'Codigo Bin Cartao'; 
         attrib CCATEG_ESTAB length = 4
            format = 4.
            label = 'Codigo Categoria Estabelecimento'; 
         attrib CCAUSA_ATGDO_PERDA length = $8
            format = $8.
            label = 'Codigo Causa Atingidos Perda'; 
         attrib CCORRL length = 8
            format = 8.
            label = 'Codigo Correlata'; 
         attrib CCORRL2 length = 8
            format = 8.
            label = 'Codigo Correlata 2'; 
         attrib CCPF_CNPJ length = $20
            format = $20.
            label = 'Codigo CPF/CNPJ'; 
         attrib CCPMF_BDN length = 8
            format = 8.
            label = 'Codigo CPMF_BDN'; 
         attrib CCTA_CLIE length = 8
            format = 8.
            label = 'Codigo Conta Cliente'; 
         attrib CCTA_CTBIL length = $13
            format = $13.
            label = 'Codigo Conta Contabil'; 
         attrib CCULPA length = 3
            format = 3.
            label = 'Codigo Culpa'; 
         attrib CDEPDC length = 8
            format = 8.
            label = 'Codigo Dependencia'; 
         attrib CEMPR length = 8
            format = 8.
            label = 'Codigo Empresa'; 
         attrib CEMPR_RAZAO length = 8
            format = 8.
            label = 'Codigo Empresa Razao'; 
         attrib CESTAB_TRANS length = $30
            format = $30.
            label = 'Codigo Estabelecimento Transacao'; 
         attrib CEVNTO_PERDA length = $10
            format = $10.
            label = 'Codigo Evento Perda'; 
         attrib CGCPJ length = 8
            label = 'Codigo GCPJ'; 
         attrib CIDTFD_CNTRL length = $50
            format = $50.
            informat = $50.
            label = 'Codigo Identificador ID Central'; 
         attrib CGRP_ATGDO_PERDA length = 8
            format = 8.
            label = 'Codigo Grupo Atingidos Perda'; 
         attrib CJUNC_DSTNO length = 8
            format = 8.
            label = 'Codigo Juncao Destino'; 
         attrib CLANC length = 8
            format = 8.
            label = 'Codigo Lancamento'; 
         attrib CLIN_NEGOC length = $3
            format = $3.
            informat = $3.
            label = 'cdLinhaNegocio'; 
         attrib CLOC_EQUIP length = 8
            format = 8.
            label = 'Codigo Local Equipamento'; 
         attrib CMAQUINA length = 8
            format = 8.
            label = 'Codigo Maquina'; 
         attrib CMOTVO_CANC length = $3
            format = $3.
            label = 'Codigo Motivo Cancelamento'; 
         attrib CMOVIM length = 4
            format = 4.
            label = 'Codigo Movimento'; 
         attrib COD_LACTO length = 5
            format = 5.
            label = 'Codigo Lançamento'; 
         attrib COSIF length = 8
            format = 8.
            label = 'COSIF'; 
         attrib CPEDIDO length = $26
            format = $26.
            label = 'Codigo Numero Pedido'; 
         attrib CPRODU length = $8
            format = $8.
            label = 'Codigo Produto'; 
         attrib CPROM length = 8
            format = 8.
            label = 'Codigo Promotora'; 
         attrib CRAIZ length = $8
            format = $8.
            label = 'Codigo Raiz'; 
         attrib CRECLA length = 8
            format = 8.
            label = 'Codigo Primeira Reclamada'; 
         attrib CREGIS_CORRT length = $21
            format = $21.
            label = 'Codigo Numero Contrato'; 
         attrib CRZ_CTBIL length = $13
            format = $13.
            label = 'Codigo Razao Contabil'; 
         attrib CSBTPO_ACAO length = 3
            format = 3.
            label = 'Codigo Subtipo Acao'; 
         attrib CSECAO length = 8
            format = 8.
            label = 'Codigo Secao'; 
         attrib CSEGUN_RECLA length = 8
            format = 8.
            label = 'Codigo Segunda Reclamada'; 
         attrib CSEQ_REGIS length = $8
            format = $8.
            label = 'Codigo Sequencia Registro'; 
         attrib CSGRP_ATGDO_PERDA length = $8
            format = $8.
            label = 'Codigo Subgrupo Atingidos Perda'; 
         attrib CSTUS length = $2
            format = $2.
            label = 'Codigo Status'; 
         attrib CTIPO_ACAO length = 4
            format = 4.
            label = 'Codigo Tipo Acao'; 
         attrib CTIPO_CARTAO length = $5
            format = $5.
            label = 'Codigo Tipo Cartao'; 
         attrib CTIPO_CTA_BDN length = 8
            format = 8.
            label = 'Codigo Tipo Cta BDN'; 
         attrib CTIPO_EQUIP length = 5
            format = 5.
            label = 'Codigo Tipo Equipamento'; 
         attrib CTIPO_FRAUD length = 3
            format = 3.
            label = 'Codigo Tipo Fraude'; 
         attrib CTIPO_MOVIM length = $1
            format = $1.
            label = 'Codigo Tipo Movimento'; 
         attrib CTIPO_OCORR_BDN length = 8
            format = 8.
            label = 'Codigo Tipo Ocorrencia BDN'; 
         attrib CTIPO_PERDA length = $2
            format = $2.
            label = 'Codigo Tipo Perda'; 
         attrib CTIPO_REGIS length = $1
            format = $1.
            label = 'Codigo Tipo Registro'; 
         attrib CTRANS length = 8
            format = 8.
            label = 'Codigo Transacao'; 
         attrib DBAIXA length = 8
            format = DDMMYY10.
            label = 'Data Baixa'; 
         attrib DCAD length = 8
            format = DDMMYY10.
            label = 'Data Cadastro'; 
         attrib DCONTR length = 8
            format = DDMMYY10.
            label = 'Data Contrato'; 
         attrib DCTBIL length = 8
            format = DDMMYY10.
            label = 'Data Contabil'; 
         attrib DDESCB length = 8
            format = DDMMYY10.
            label = 'Data Descoberta'; 
         attrib DOCORR length = 8
            format = DDMMYY10.
            label = 'Data Ocorrencia'; 
         attrib DREFERENCIA_LEGADO length = 8
            format = 8.
            label = 'Data Referencia Arquivo Legado (AAAAMM)'; 
         attrib DTRANS length = 8
            format = DDMMYY10.
            label = 'Data Transacao'; 
         attrib IARQUIVO_LEGADO length = $255
            format = $255.
            label = 'Nome Arquivo Legado'; 
         attrib IBANDE length = $50
            format = $50.
            label = 'Nome Bandeira'; 
         attrib ICIDAD_CLINT length = $30
            format = $30.
            label = 'Nome Cidade Cliente'; 
         attrib ICIDAD_ESTAB length = $12
            format = $12.
            label = 'Nome Cidade Estabelecimento'; 
         attrib ICOMAR length = $40
            format = $40.
            label = 'Nome Comarca'; 
         attrib IDESP length = $25
            format = $25.
            label = 'Nome Despesa'; 
         attrib IENVDO length = $50
            format = $50.
            label = 'Nome Envolvido'; 
         attrib IESTAD_CLINT length = $2
            format = $2.
            label = 'Nome Estado Cliente'; 
         attrib IESTAD_ESTAB length = $2
            format = $2.
            label = 'Nome Estado Estabelecimento'; 
         attrib IMUN length = $20
            format = $20.
            label = 'Nome Municipio'; 
         attrib IPAIS_TRANS length = $2
            format = $2.
            label = 'Nome Pais Transacao'; 
         attrib IPLANO_SEG length = $42
            format = $42.
            label = 'Nome Motivo Plano Segurança'; 
         attrib ISBTPO_ACAO length = $256
            format = $256.
            label = 'Nome Subtipo Acao'; 
         attrib IUF length = $2
            format = $2.
            label = 'Nome UF'; 
         attrib NBANDE length = 5
            format = 5.
            label = 'Numero Bandeira'; 
         attrib NBDN length = $18
            format = $18.
            label = 'Numero DBDN/BDN'; 
         attrib NCATAO length = $16
            format = $16.
            label = 'Numero Cartao'; 
         attrib NCOTACAO length = 8
            format = 8.
            label = 'Numero Cotacao'; 
         attrib NOPER length = $20
            format = $20.
            label = 'Numero Operacao'; 
         attrib NPROCS length = $30
            format = $30.
            label = 'Numero Processo'; 
         attrib NREF length = $23
            format = $23.
            label = 'Numero Referencia'; 
         attrib RDEPDC length = $50
            format = $50.
            label = 'Descricao Dependencia'; 
         attrib REMPR length = $50
            format = $50.
            label = 'Descricao Empresa'; 
         attrib REVENTO length = $20
            format = $20.
            label = 'Descricao Evento'; 
         attrib RHIST length = $3410
            format = $3410.
            label = 'Descricao Historico'; 
         attrib RMOTVO_BAIXA length = $50
            format = $50.
            informat = $50.
            label = 'Descricao Motivo Baixa'; 
         attrib RMOTVO_CANC length = $8
            format = $8.
            label = 'Descricao Motivo Cancelamento'; 
         attrib RPRODU length = $40
            format = $40.
            label = 'Descricao Produto'; 
         attrib RRECLA length = $50
            format = $50.
            label = 'Descricao Reclamada'; 
         attrib RSBTPO_ACAO length = $256
            format = $256.
            label = 'Descricao Subtipo Acao'; 
         attrib RSEGUN_RECLA length = $50
            format = $50.
            label = 'Descricao Segunda Reclamada'; 
         attrib RSGMTO_DBDN length = $18
            format = $18.
            label = 'Descricao Segmento DBDN'; 
         attrib RSTATUS length = $20
            format = $20.
            label = 'Descricao Status'; 
         attrib RTIPO_ACAO length = $256
            format = $256.
            label = 'Descricao Tipo Acao'; 
         attrib RTIPO_FRAUD length = $20
            format = $20.
            label = 'Descricao Tipo Fraude'; 
         attrib RTIPO_TRANS length = $1
            format = $1.
            label = 'Descricao Tipo Transacao'; 
         attrib VBAIXA length = 8
            format = COMMAX12.2
            label = 'Valor Baixa'; 
         attrib VBANCO_COMPR length = 8
            format = COMMAX12.2
            label = 'Valor Banco Comprados'; 
         attrib VCPMF_TRANS length = 8
            format = COMMAX12.2
            label = 'Valor CPMF Transacao'; 
         attrib VDESP_ACESS length = 8
            format = COMMAX12.2
            label = 'Valor  Despesa Acessoria Perda'; 
         attrib VDESP_BDSCO length = 8
            format = COMMAX12.2
            label = 'Valor Despesa Bradesco Perda'; 
         attrib VDESP_VDDOR length = 8
            format = COMMAX12.2
            label = 'Valor Despesa Vendedor Perda'; 
         attrib VORI length = 8
            format = COMMAX12.2
            label = 'Valor Original'; 
         attrib VPERDA length = 8
            format = COMMAX12.2
            label = 'Valor Perda'; 
         attrib VPERDA_RCUPC length = 8
            format = COMMAX12.2
            label = 'Valor Perda/Recuperacao'; 
         attrib VRECUP_ESTORNO length = 8
            format = COMMAX12.2
            label = 'Valor Recuperacao Estorno Perda'; 
         attrib VREEMB length = 8
            format = COMMAX12.2
            label = 'Valor Reembolso'; 
         attrib VREEMB_BDN length = 8
            format = COMMAX12.2
            label = 'Valor Reembolso BDN'; 
         attrib VTRANS length = 8
            format = COMMAX12.2
            label = 'Valor Transacao'; 
         attrib CCLASF_ENVDO length = 8
            label = 'cdClassificacaoEnvolvido'; 
         attrib CAG_CLIE length = 8
            label = 'cdAgenciaCliente'; 
         call missing(of _all_);
         stop;
      run;
      
      %rcSet(&syserr); 
      
   %end;  /* if table does not exist  */ 
   
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = RO_REP.TREP_PERDAS_OP 
      data = &etls_lastTable (&etls_tableOptions)  force ; 
    run; 
   
   %rcSet(&syserr); 
   
   proc datasets lib = work nolist nowarn memtype = (data view);
      delete W2S6OSTN;
   quit;
   
%mend etls_loader;
%etls_loader;

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_REP.TREP_PERDAS_OP, DATA)) or 
         %sysfunc(exist(RO_REP.TREP_PERDAS_OP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_REP.TREP_PERDAS_OP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

/*---- Start of Post-Process Code  ----*/ 

/*Move o arquivo de origem para a pasta PROCESSADOS*/
%moveArquivo(dirorig="9007-BRAD_CORRETORA_BBI",arqorig="BBI.txt",dir="PROCESSADOS");

/*Envia o resumo para o email*/
%emailOk();
/*---- End of Post-Process Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 



/**  Step end Table Loader **/

/*==========================================================================* 
 * Step:            CTR_FIM                               A5J3RISO.AC0000UD * 
 * Transform:       CTR_FIM                                                 * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Table:    TREP_PERDAS_OP -                      A5J3RISO.AQ00007W * 
 *                   RO_REP.TREP_PERDAS_OP                                  * 
 * Target Table:    TCTR_CARGA - RO_CTR_C.TCTR_CARGA      A5J3RISO.AQ00007Y * 
 *==========================================================================*/ 

%let transformID = %quote(A5J3RISO.AC0000UD);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for EGRC_RO_CTR_CARGA  */ 
LIBNAME RO_CTR_C BASE "/RODATAPRD/ROPRODUTIVO/EGRC_RO/DADOS/CONTROLE_CARGA/TABELA" filelockwait = 600 ;
%rcSet(&syslibrc); 

%let etls_recCheckExist = 0; 
%let etls_recnt = 0; 
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(RO_REP.TREP_PERDAS_OP, DATA)) or 
         %sysfunc(exist(RO_REP.TREP_PERDAS_OP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      %local etls_syntaxcheck; 
      %let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck)); 
      /* Turn off syntaxcheck option to perform following steps  */ 
      options nosyntaxcheck;
      
      proc contents data = RO_REP.TREP_PERDAS_OP out = work.etls_contents(keep = nobs) noprint; 
      run; 
      
      data _null_; 
         set work.etls_contents (obs = 1); 
         call symput("etls_recnt", left(put(nobs,32.))); 
      run;
      
      proc datasets lib = work nolist nowarn memtype = (data view);
         delete etls_contents;
      quit;
      
      /* Reset syntaxcheck option to previous setting  */ 
      options &etls_syntaxcheck; 
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let SYSLAST = %nrquote(RO_REP.TREP_PERDAS_OP); 

%let _INPUT_count = 1; 
%let _INPUT = RO_REP.TREP_PERDAS_OP;
%let _INPUT_connect = ;
%let _INPUT_engine = BASE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/Risco Operacional/EGRC/Produtivo/02_Repositorio/02_Tabelas_Destino/TREP_PERDAS_OP%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote(Repositorio de perdas operacionais);

%let _INPUT0 = RO_REP.TREP_PERDAS_OP;
%let _INPUT0_connect = ;
%let _INPUT0_engine = BASE;
%let _INPUT0_memtype = DATA;
%let _INPUT0_options = %nrquote();
%let _INPUT0_alter = %nrquote();
%let _INPUT0_path = %nrquote(/Risco Operacional/EGRC/Produtivo/02_Repositorio/02_Tabelas_Destino/TREP_PERDAS_OP%(Table%));
%let _INPUT0_type = 1;
%let _INPUT0_label = %nrquote(Repositorio de perdas operacionais);

%let _OUTPUT_count = 1; 
%let _OUTPUT = RO_CTR_C.TCTR_CARGA;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = BASE;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/Risco Operacional/EGRC/Produtivo/03_Controle_carga/02_Tabelas_Destino/TCTR_CARGA%(Table%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT_keep = NOM_TABELA NOM_JOB NOM_LIBNAME DTH_INI DTH_FIM DAT_CARGA REFERENCIA 
        COD_RETURN_CODE;

%let _OUTPUT0 = RO_CTR_C.TCTR_CARGA;
%let _OUTPUT0_connect = ;
%let _OUTPUT0_engine = BASE;
%let _OUTPUT0_memtype = DATA;
%let _OUTPUT0_options = %nrquote();
%let _OUTPUT0_alter = %nrquote();
%let _OUTPUT0_path = %nrquote(/Risco Operacional/EGRC/Produtivo/03_Controle_carga/02_Tabelas_Destino/TCTR_CARGA%(Table%));
%let _OUTPUT0_type = 1;
%let _OUTPUT0_label = %nrquote();
/* List of target columns to keep  */ 
%let _OUTPUT0_keep = NOM_TABELA NOM_JOB NOM_LIBNAME DTH_INI DTH_FIM DAT_CARGA REFERENCIA 
        COD_RETURN_CODE;



/* List of target columns to keep  */ 
%let _keep = NOM_TABELA NOM_JOB NOM_LIBNAME DTH_INI DTH_FIM DAT_CARGA REFERENCIA 
        COD_RETURN_CODE;
/* List of target columns to keep  */ 
%let keep = NOM_TABELA NOM_JOB NOM_LIBNAME DTH_INI DTH_FIM DAT_CARGA REFERENCIA 
        COD_RETURN_CODE;
/* rotina de controle de fim do processo
  CRIAR LIBNAME EM BASE COM OPÇAO  FILELOCKWAIT=10
  PARA EVITAR LOCK DA TABELA DE CONTROLE DE CARGA NA HORA DO APPEND 
*/



%macro Fim_Processo;

 data work.TCTR_CARGA;
       set work.TCTR_CARGA;
       DTH_FIM = datetime();
       COD_RETURN_CODE = &job_rc; 
    run;

	proc append base=RO_CTR_C.TCTR_CARGA 
                data= TCTR_CARGA force;
	run; 
%mend Fim_Processo;

%Fim_Processo;

%rcSet(&syserr); 
%rcSet(&sysrc); 
%rcSet(&sqlrc); 



/**  Step end CTR_FIM **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

